// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: zera_api.proto

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APIService_Balance_FullMethodName      = "/APIService/Balance"
	APIService_Nonce_FullMethodName        = "/APIService/Nonce"
	APIService_ContractFee_FullMethodName  = "/APIService/ContractFee"
	APIService_BaseFee_FullMethodName      = "/APIService/BaseFee"
	APIService_ACETokens_FullMethodName    = "/APIService/ACETokens"
	APIService_Items_FullMethodName        = "/APIService/Items"
	APIService_Denomination_FullMethodName = "/APIService/Denomination"
	APIService_Database_FullMethodName     = "/APIService/Database"
)

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	Nonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error)
	ContractFee(ctx context.Context, in *ContractFeeRequest, opts ...grpc.CallOption) (*ContractFeeResponse, error)
	BaseFee(ctx context.Context, in *BaseFeeRequest, opts ...grpc.CallOption) (*BaseFeeResponse, error)
	ACETokens(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ACETokensResponse, error)
	Items(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	Denomination(ctx context.Context, in *DenominationRequest, opts ...grpc.CallOption) (*DenominationResponse, error)
	Database(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, APIService_Balance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Nonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error) {
	out := new(NonceResponse)
	err := c.cc.Invoke(ctx, APIService_Nonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ContractFee(ctx context.Context, in *ContractFeeRequest, opts ...grpc.CallOption) (*ContractFeeResponse, error) {
	out := new(ContractFeeResponse)
	err := c.cc.Invoke(ctx, APIService_ContractFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) BaseFee(ctx context.Context, in *BaseFeeRequest, opts ...grpc.CallOption) (*BaseFeeResponse, error) {
	out := new(BaseFeeResponse)
	err := c.cc.Invoke(ctx, APIService_BaseFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ACETokens(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ACETokensResponse, error) {
	out := new(ACETokensResponse)
	err := c.cc.Invoke(ctx, APIService_ACETokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Items(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, APIService_Items_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Denomination(ctx context.Context, in *DenominationRequest, opts ...grpc.CallOption) (*DenominationResponse, error) {
	out := new(DenominationResponse)
	err := c.cc.Invoke(ctx, APIService_Denomination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Database(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error) {
	out := new(DatabaseResponse)
	err := c.cc.Invoke(ctx, APIService_Database_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	Nonce(context.Context, *NonceRequest) (*NonceResponse, error)
	ContractFee(context.Context, *ContractFeeRequest) (*ContractFeeResponse, error)
	BaseFee(context.Context, *BaseFeeRequest) (*BaseFeeResponse, error)
	ACETokens(context.Context, *empty.Empty) (*ACETokensResponse, error)
	Items(context.Context, *ItemRequest) (*ItemResponse, error)
	Denomination(context.Context, *DenominationRequest) (*DenominationResponse, error)
	Database(context.Context, *DatabaseRequest) (*DatabaseResponse, error)
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedAPIServiceServer) Nonce(context.Context, *NonceRequest) (*NonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nonce not implemented")
}
func (UnimplementedAPIServiceServer) ContractFee(context.Context, *ContractFeeRequest) (*ContractFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractFee not implemented")
}
func (UnimplementedAPIServiceServer) BaseFee(context.Context, *BaseFeeRequest) (*BaseFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseFee not implemented")
}
func (UnimplementedAPIServiceServer) ACETokens(context.Context, *empty.Empty) (*ACETokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACETokens not implemented")
}
func (UnimplementedAPIServiceServer) Items(context.Context, *ItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Items not implemented")
}
func (UnimplementedAPIServiceServer) Denomination(context.Context, *DenominationRequest) (*DenominationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Denomination not implemented")
}
func (UnimplementedAPIServiceServer) Database(context.Context, *DatabaseRequest) (*DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Database not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Nonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Nonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Nonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Nonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ContractFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ContractFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_ContractFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ContractFee(ctx, req.(*ContractFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_BaseFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).BaseFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_BaseFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).BaseFee(ctx, req.(*BaseFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ACETokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ACETokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_ACETokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ACETokens(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Items_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Items(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Items_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Items(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Denomination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenominationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Denomination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Denomination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Denomination(ctx, req.(*DenominationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Database_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Database(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Database_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Database(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Balance",
			Handler:    _APIService_Balance_Handler,
		},
		{
			MethodName: "Nonce",
			Handler:    _APIService_Nonce_Handler,
		},
		{
			MethodName: "ContractFee",
			Handler:    _APIService_ContractFee_Handler,
		},
		{
			MethodName: "BaseFee",
			Handler:    _APIService_BaseFee_Handler,
		},
		{
			MethodName: "ACETokens",
			Handler:    _APIService_ACETokens_Handler,
		},
		{
			MethodName: "Items",
			Handler:    _APIService_Items_Handler,
		},
		{
			MethodName: "Denomination",
			Handler:    _APIService_Denomination_Handler,
		},
		{
			MethodName: "Database",
			Handler:    _APIService_Database_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zera_api.proto",
}
