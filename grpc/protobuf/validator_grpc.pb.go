// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: validator.proto

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ValidatorService_StreamFailedBlock_FullMethodName                 = "/zera_validator.ValidatorService/StreamFailedBlock"
	ValidatorService_StreamBroadcast_FullMethodName                   = "/zera_validator.ValidatorService/StreamBroadcast"
	ValidatorService_SyncBlockchain_FullMethodName                    = "/zera_validator.ValidatorService/SyncBlockchain"
	ValidatorService_StreamGossip_FullMethodName                      = "/zera_validator.ValidatorService/StreamGossip"
	ValidatorService_Broadcast_FullMethodName                         = "/zera_validator.ValidatorService/Broadcast"
	ValidatorService_ValidatorRegistration_FullMethodName             = "/zera_validator.ValidatorService/ValidatorRegistration"
	ValidatorService_SyncValidatorList_FullMethodName                 = "/zera_validator.ValidatorService/SyncValidatorList"
	ValidatorService_ValidatorMint_FullMethodName                     = "/zera_validator.ValidatorService/ValidatorMint"
	ValidatorService_ValidatorItemMint_FullMethodName                 = "/zera_validator.ValidatorService/ValidatorItemMint"
	ValidatorService_ValidatorContract_FullMethodName                 = "/zera_validator.ValidatorService/ValidatorContract"
	ValidatorService_ValidatorGovernProposal_FullMethodName           = "/zera_validator.ValidatorService/ValidatorGovernProposal"
	ValidatorService_ValidatorGovernVote_FullMethodName               = "/zera_validator.ValidatorService/ValidatorGovernVote"
	ValidatorService_ValidatorSmartContract_FullMethodName            = "/zera_validator.ValidatorService/ValidatorSmartContract"
	ValidatorService_ValidatorSmartContractInstantiate_FullMethodName = "/zera_validator.ValidatorService/ValidatorSmartContractInstantiate"
	ValidatorService_ValidatorSmartContractExecute_FullMethodName     = "/zera_validator.ValidatorService/ValidatorSmartContractExecute"
	ValidatorService_ValidatorExpenseRatio_FullMethodName             = "/zera_validator.ValidatorService/ValidatorExpenseRatio"
	ValidatorService_ValidatorNFT_FullMethodName                      = "/zera_validator.ValidatorService/ValidatorNFT"
	ValidatorService_ValidatorContractUpdate_FullMethodName           = "/zera_validator.ValidatorService/ValidatorContractUpdate"
	ValidatorService_ValidatorHeartbeat_FullMethodName                = "/zera_validator.ValidatorService/ValidatorHeartbeat"
	ValidatorService_ValidatorDelegatedVoting_FullMethodName          = "/zera_validator.ValidatorService/ValidatorDelegatedVoting"
	ValidatorService_IndexerVoting_FullMethodName                     = "/zera_validator.ValidatorService/IndexerVoting"
	ValidatorService_ValidatorQuash_FullMethodName                    = "/zera_validator.ValidatorService/ValidatorQuash"
	ValidatorService_ValidatorFastQuorum_FullMethodName               = "/zera_validator.ValidatorService/ValidatorFastQuorum"
	ValidatorService_ValidatorRevoke_FullMethodName                   = "/zera_validator.ValidatorService/ValidatorRevoke"
	ValidatorService_ValidatorCompliance_FullMethodName               = "/zera_validator.ValidatorService/ValidatorCompliance"
	ValidatorService_ValidatorBurnSBT_FullMethodName                  = "/zera_validator.ValidatorService/ValidatorBurnSBT"
	ValidatorService_Nonce_FullMethodName                             = "/zera_validator.ValidatorService/Nonce"
	ValidatorService_ValidatorCoin_FullMethodName                     = "/zera_validator.ValidatorService/ValidatorCoin"
	ValidatorService_StreamBlockAttestation_FullMethodName            = "/zera_validator.ValidatorService/StreamBlockAttestation"
	ValidatorService_StreamRequestSlashed_FullMethodName              = "/zera_validator.ValidatorService/StreamRequestSlashed"
	ValidatorService_Balance_FullMethodName                           = "/zera_validator.ValidatorService/Balance"
	ValidatorService_Gossip_FullMethodName                            = "/zera_validator.ValidatorService/Gossip"
	ValidatorService_ValidatorAllowance_FullMethodName                = "/zera_validator.ValidatorService/ValidatorAllowance"
)

// ValidatorServiceClient is the client API for ValidatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidatorServiceClient interface {
	// streams
	StreamFailedBlock(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamFailedBlockClient, error)
	StreamBroadcast(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamBroadcastClient, error)
	SyncBlockchain(ctx context.Context, in *BlockSync, opts ...grpc.CallOption) (ValidatorService_SyncBlockchainClient, error)
	StreamGossip(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamGossipClient, error)
	Broadcast(ctx context.Context, in *Block, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorRegistration(ctx context.Context, in *ValidatorRegistration, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncValidatorList(ctx context.Context, in *ValidatorSyncRequest, opts ...grpc.CallOption) (*ValidatorSync, error)
	ValidatorMint(ctx context.Context, in *MintTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorItemMint(ctx context.Context, in *ItemizedMintTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorContract(ctx context.Context, in *InstrumentContract, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorGovernProposal(ctx context.Context, in *GovernanceProposal, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorGovernVote(ctx context.Context, in *GovernanceVote, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorSmartContract(ctx context.Context, in *SmartContractTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorSmartContractInstantiate(ctx context.Context, in *SmartContractInstantiateTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorSmartContractExecute(ctx context.Context, in *SmartContractExecuteTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorExpenseRatio(ctx context.Context, in *ExpenseRatioTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorNFT(ctx context.Context, in *NFTTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorContractUpdate(ctx context.Context, in *ContractUpdateTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorHeartbeat(ctx context.Context, in *ValidatorHeartbeat, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorDelegatedVoting(ctx context.Context, in *DelegatedTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	IndexerVoting(ctx context.Context, in *IndexerVotingRequest, opts ...grpc.CallOption) (*IndexerVotingResponse, error)
	ValidatorQuash(ctx context.Context, in *QuashTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorFastQuorum(ctx context.Context, in *FastQuorumTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorRevoke(ctx context.Context, in *RevokeTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorCompliance(ctx context.Context, in *ComplianceTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorBurnSBT(ctx context.Context, in *BurnSBTTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	Nonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error)
	ValidatorCoin(ctx context.Context, in *CoinTXN, opts ...grpc.CallOption) (*empty.Empty, error)
	StreamBlockAttestation(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamBlockAttestationClient, error)
	StreamRequestSlashed(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamRequestSlashedClient, error)
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	Gossip(ctx context.Context, in *TXNGossip, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidatorAllowance(ctx context.Context, in *AllowanceTXN, opts ...grpc.CallOption) (*empty.Empty, error)
}

type validatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidatorServiceClient(cc grpc.ClientConnInterface) ValidatorServiceClient {
	return &validatorServiceClient{cc}
}

func (c *validatorServiceClient) StreamFailedBlock(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamFailedBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[0], ValidatorService_StreamFailedBlock_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorServiceStreamFailedBlockClient{stream}
	return x, nil
}

type ValidatorService_StreamFailedBlockClient interface {
	Send(*DataChunk) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type validatorServiceStreamFailedBlockClient struct {
	grpc.ClientStream
}

func (x *validatorServiceStreamFailedBlockClient) Send(m *DataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validatorServiceStreamFailedBlockClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validatorServiceClient) StreamBroadcast(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamBroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[1], ValidatorService_StreamBroadcast_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorServiceStreamBroadcastClient{stream}
	return x, nil
}

type ValidatorService_StreamBroadcastClient interface {
	Send(*DataChunk) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type validatorServiceStreamBroadcastClient struct {
	grpc.ClientStream
}

func (x *validatorServiceStreamBroadcastClient) Send(m *DataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validatorServiceStreamBroadcastClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validatorServiceClient) SyncBlockchain(ctx context.Context, in *BlockSync, opts ...grpc.CallOption) (ValidatorService_SyncBlockchainClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[2], ValidatorService_SyncBlockchain_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorServiceSyncBlockchainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ValidatorService_SyncBlockchainClient interface {
	Recv() (*DataChunk, error)
	grpc.ClientStream
}

type validatorServiceSyncBlockchainClient struct {
	grpc.ClientStream
}

func (x *validatorServiceSyncBlockchainClient) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validatorServiceClient) StreamGossip(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamGossipClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[3], ValidatorService_StreamGossip_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorServiceStreamGossipClient{stream}
	return x, nil
}

type ValidatorService_StreamGossipClient interface {
	Send(*DataChunk) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type validatorServiceStreamGossipClient struct {
	grpc.ClientStream
}

func (x *validatorServiceStreamGossipClient) Send(m *DataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validatorServiceStreamGossipClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validatorServiceClient) Broadcast(ctx context.Context, in *Block, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_Broadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorRegistration(ctx context.Context, in *ValidatorRegistration, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) SyncValidatorList(ctx context.Context, in *ValidatorSyncRequest, opts ...grpc.CallOption) (*ValidatorSync, error) {
	out := new(ValidatorSync)
	err := c.cc.Invoke(ctx, ValidatorService_SyncValidatorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorMint(ctx context.Context, in *MintTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorMint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorItemMint(ctx context.Context, in *ItemizedMintTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorItemMint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorContract(ctx context.Context, in *InstrumentContract, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorGovernProposal(ctx context.Context, in *GovernanceProposal, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorGovernProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorGovernVote(ctx context.Context, in *GovernanceVote, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorGovernVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorSmartContract(ctx context.Context, in *SmartContractTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorSmartContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorSmartContractInstantiate(ctx context.Context, in *SmartContractInstantiateTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorSmartContractInstantiate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorSmartContractExecute(ctx context.Context, in *SmartContractExecuteTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorSmartContractExecute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorExpenseRatio(ctx context.Context, in *ExpenseRatioTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorExpenseRatio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorNFT(ctx context.Context, in *NFTTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorNFT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorContractUpdate(ctx context.Context, in *ContractUpdateTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorContractUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorHeartbeat(ctx context.Context, in *ValidatorHeartbeat, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorDelegatedVoting(ctx context.Context, in *DelegatedTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorDelegatedVoting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) IndexerVoting(ctx context.Context, in *IndexerVotingRequest, opts ...grpc.CallOption) (*IndexerVotingResponse, error) {
	out := new(IndexerVotingResponse)
	err := c.cc.Invoke(ctx, ValidatorService_IndexerVoting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorQuash(ctx context.Context, in *QuashTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorQuash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorFastQuorum(ctx context.Context, in *FastQuorumTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorFastQuorum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorRevoke(ctx context.Context, in *RevokeTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorCompliance(ctx context.Context, in *ComplianceTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorCompliance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorBurnSBT(ctx context.Context, in *BurnSBTTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorBurnSBT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) Nonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error) {
	out := new(NonceResponse)
	err := c.cc.Invoke(ctx, ValidatorService_Nonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorCoin(ctx context.Context, in *CoinTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) StreamBlockAttestation(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamBlockAttestationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[4], ValidatorService_StreamBlockAttestation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorServiceStreamBlockAttestationClient{stream}
	return x, nil
}

type ValidatorService_StreamBlockAttestationClient interface {
	Send(*DataChunk) error
	Recv() (*DataChunk, error)
	grpc.ClientStream
}

type validatorServiceStreamBlockAttestationClient struct {
	grpc.ClientStream
}

func (x *validatorServiceStreamBlockAttestationClient) Send(m *DataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validatorServiceStreamBlockAttestationClient) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validatorServiceClient) StreamRequestSlashed(ctx context.Context, opts ...grpc.CallOption) (ValidatorService_StreamRequestSlashedClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[5], ValidatorService_StreamRequestSlashed_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorServiceStreamRequestSlashedClient{stream}
	return x, nil
}

type ValidatorService_StreamRequestSlashedClient interface {
	Send(*SlashedRequest) error
	Recv() (*DataChunk, error)
	grpc.ClientStream
}

type validatorServiceStreamRequestSlashedClient struct {
	grpc.ClientStream
}

func (x *validatorServiceStreamRequestSlashedClient) Send(m *SlashedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validatorServiceStreamRequestSlashedClient) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validatorServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, ValidatorService_Balance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) Gossip(ctx context.Context, in *TXNGossip, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_Gossip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ValidatorAllowance(ctx context.Context, in *AllowanceTXN, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ValidatorService_ValidatorAllowance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidatorServiceServer is the server API for ValidatorService service.
// All implementations must embed UnimplementedValidatorServiceServer
// for forward compatibility
type ValidatorServiceServer interface {
	// streams
	StreamFailedBlock(ValidatorService_StreamFailedBlockServer) error
	StreamBroadcast(ValidatorService_StreamBroadcastServer) error
	SyncBlockchain(*BlockSync, ValidatorService_SyncBlockchainServer) error
	StreamGossip(ValidatorService_StreamGossipServer) error
	Broadcast(context.Context, *Block) (*empty.Empty, error)
	ValidatorRegistration(context.Context, *ValidatorRegistration) (*empty.Empty, error)
	SyncValidatorList(context.Context, *ValidatorSyncRequest) (*ValidatorSync, error)
	ValidatorMint(context.Context, *MintTXN) (*empty.Empty, error)
	ValidatorItemMint(context.Context, *ItemizedMintTXN) (*empty.Empty, error)
	ValidatorContract(context.Context, *InstrumentContract) (*empty.Empty, error)
	ValidatorGovernProposal(context.Context, *GovernanceProposal) (*empty.Empty, error)
	ValidatorGovernVote(context.Context, *GovernanceVote) (*empty.Empty, error)
	ValidatorSmartContract(context.Context, *SmartContractTXN) (*empty.Empty, error)
	ValidatorSmartContractInstantiate(context.Context, *SmartContractInstantiateTXN) (*empty.Empty, error)
	ValidatorSmartContractExecute(context.Context, *SmartContractExecuteTXN) (*empty.Empty, error)
	ValidatorExpenseRatio(context.Context, *ExpenseRatioTXN) (*empty.Empty, error)
	ValidatorNFT(context.Context, *NFTTXN) (*empty.Empty, error)
	ValidatorContractUpdate(context.Context, *ContractUpdateTXN) (*empty.Empty, error)
	ValidatorHeartbeat(context.Context, *ValidatorHeartbeat) (*empty.Empty, error)
	ValidatorDelegatedVoting(context.Context, *DelegatedTXN) (*empty.Empty, error)
	IndexerVoting(context.Context, *IndexerVotingRequest) (*IndexerVotingResponse, error)
	ValidatorQuash(context.Context, *QuashTXN) (*empty.Empty, error)
	ValidatorFastQuorum(context.Context, *FastQuorumTXN) (*empty.Empty, error)
	ValidatorRevoke(context.Context, *RevokeTXN) (*empty.Empty, error)
	ValidatorCompliance(context.Context, *ComplianceTXN) (*empty.Empty, error)
	ValidatorBurnSBT(context.Context, *BurnSBTTXN) (*empty.Empty, error)
	Nonce(context.Context, *NonceRequest) (*NonceResponse, error)
	ValidatorCoin(context.Context, *CoinTXN) (*empty.Empty, error)
	StreamBlockAttestation(ValidatorService_StreamBlockAttestationServer) error
	StreamRequestSlashed(ValidatorService_StreamRequestSlashedServer) error
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	Gossip(context.Context, *TXNGossip) (*empty.Empty, error)
	ValidatorAllowance(context.Context, *AllowanceTXN) (*empty.Empty, error)
	mustEmbedUnimplementedValidatorServiceServer()
}

// UnimplementedValidatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedValidatorServiceServer struct {
}

func (UnimplementedValidatorServiceServer) StreamFailedBlock(ValidatorService_StreamFailedBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFailedBlock not implemented")
}
func (UnimplementedValidatorServiceServer) StreamBroadcast(ValidatorService_StreamBroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBroadcast not implemented")
}
func (UnimplementedValidatorServiceServer) SyncBlockchain(*BlockSync, ValidatorService_SyncBlockchainServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncBlockchain not implemented")
}
func (UnimplementedValidatorServiceServer) StreamGossip(ValidatorService_StreamGossipServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGossip not implemented")
}
func (UnimplementedValidatorServiceServer) Broadcast(context.Context, *Block) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorRegistration(context.Context, *ValidatorRegistration) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorRegistration not implemented")
}
func (UnimplementedValidatorServiceServer) SyncValidatorList(context.Context, *ValidatorSyncRequest) (*ValidatorSync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncValidatorList not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorMint(context.Context, *MintTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorMint not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorItemMint(context.Context, *ItemizedMintTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorItemMint not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorContract(context.Context, *InstrumentContract) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorContract not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorGovernProposal(context.Context, *GovernanceProposal) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorGovernProposal not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorGovernVote(context.Context, *GovernanceVote) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorGovernVote not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorSmartContract(context.Context, *SmartContractTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorSmartContract not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorSmartContractInstantiate(context.Context, *SmartContractInstantiateTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorSmartContractInstantiate not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorSmartContractExecute(context.Context, *SmartContractExecuteTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorSmartContractExecute not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorExpenseRatio(context.Context, *ExpenseRatioTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorExpenseRatio not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorNFT(context.Context, *NFTTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorNFT not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorContractUpdate(context.Context, *ContractUpdateTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorContractUpdate not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorHeartbeat(context.Context, *ValidatorHeartbeat) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorHeartbeat not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorDelegatedVoting(context.Context, *DelegatedTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorDelegatedVoting not implemented")
}
func (UnimplementedValidatorServiceServer) IndexerVoting(context.Context, *IndexerVotingRequest) (*IndexerVotingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexerVoting not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorQuash(context.Context, *QuashTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorQuash not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorFastQuorum(context.Context, *FastQuorumTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorFastQuorum not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorRevoke(context.Context, *RevokeTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorRevoke not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorCompliance(context.Context, *ComplianceTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorCompliance not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorBurnSBT(context.Context, *BurnSBTTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorBurnSBT not implemented")
}
func (UnimplementedValidatorServiceServer) Nonce(context.Context, *NonceRequest) (*NonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nonce not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorCoin(context.Context, *CoinTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorCoin not implemented")
}
func (UnimplementedValidatorServiceServer) StreamBlockAttestation(ValidatorService_StreamBlockAttestationServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlockAttestation not implemented")
}
func (UnimplementedValidatorServiceServer) StreamRequestSlashed(ValidatorService_StreamRequestSlashedServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequestSlashed not implemented")
}
func (UnimplementedValidatorServiceServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedValidatorServiceServer) Gossip(context.Context, *TXNGossip) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gossip not implemented")
}
func (UnimplementedValidatorServiceServer) ValidatorAllowance(context.Context, *AllowanceTXN) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorAllowance not implemented")
}
func (UnimplementedValidatorServiceServer) mustEmbedUnimplementedValidatorServiceServer() {}

// UnsafeValidatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidatorServiceServer will
// result in compilation errors.
type UnsafeValidatorServiceServer interface {
	mustEmbedUnimplementedValidatorServiceServer()
}

func RegisterValidatorServiceServer(s grpc.ServiceRegistrar, srv ValidatorServiceServer) {
	s.RegisterService(&ValidatorService_ServiceDesc, srv)
}

func _ValidatorService_StreamFailedBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidatorServiceServer).StreamFailedBlock(&validatorServiceStreamFailedBlockServer{stream})
}

type ValidatorService_StreamFailedBlockServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*DataChunk, error)
	grpc.ServerStream
}

type validatorServiceStreamFailedBlockServer struct {
	grpc.ServerStream
}

func (x *validatorServiceStreamFailedBlockServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validatorServiceStreamFailedBlockServer) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValidatorService_StreamBroadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidatorServiceServer).StreamBroadcast(&validatorServiceStreamBroadcastServer{stream})
}

type ValidatorService_StreamBroadcastServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*DataChunk, error)
	grpc.ServerStream
}

type validatorServiceStreamBroadcastServer struct {
	grpc.ServerStream
}

func (x *validatorServiceStreamBroadcastServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validatorServiceStreamBroadcastServer) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValidatorService_SyncBlockchain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockSync)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValidatorServiceServer).SyncBlockchain(m, &validatorServiceSyncBlockchainServer{stream})
}

type ValidatorService_SyncBlockchainServer interface {
	Send(*DataChunk) error
	grpc.ServerStream
}

type validatorServiceSyncBlockchainServer struct {
	grpc.ServerStream
}

func (x *validatorServiceSyncBlockchainServer) Send(m *DataChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ValidatorService_StreamGossip_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidatorServiceServer).StreamGossip(&validatorServiceStreamGossipServer{stream})
}

type ValidatorService_StreamGossipServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*DataChunk, error)
	grpc.ServerStream
}

type validatorServiceStreamGossipServer struct {
	grpc.ServerStream
}

func (x *validatorServiceStreamGossipServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validatorServiceStreamGossipServer) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValidatorService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).Broadcast(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorRegistration(ctx, req.(*ValidatorRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_SyncValidatorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).SyncValidatorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_SyncValidatorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).SyncValidatorList(ctx, req.(*ValidatorSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorMint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorMint(ctx, req.(*MintTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorItemMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemizedMintTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorItemMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorItemMint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorItemMint(ctx, req.(*ItemizedMintTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorContract(ctx, req.(*InstrumentContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorGovernProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GovernanceProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorGovernProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorGovernProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorGovernProposal(ctx, req.(*GovernanceProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorGovernVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GovernanceVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorGovernVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorGovernVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorGovernVote(ctx, req.(*GovernanceVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorSmartContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartContractTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorSmartContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorSmartContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorSmartContract(ctx, req.(*SmartContractTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorSmartContractInstantiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartContractInstantiateTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorSmartContractInstantiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorSmartContractInstantiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorSmartContractInstantiate(ctx, req.(*SmartContractInstantiateTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorSmartContractExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartContractExecuteTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorSmartContractExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorSmartContractExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorSmartContractExecute(ctx, req.(*SmartContractExecuteTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorExpenseRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseRatioTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorExpenseRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorExpenseRatio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorExpenseRatio(ctx, req.(*ExpenseRatioTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFTTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorNFT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorNFT(ctx, req.(*NFTTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorContractUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractUpdateTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorContractUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorContractUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorContractUpdate(ctx, req.(*ContractUpdateTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorHeartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorHeartbeat(ctx, req.(*ValidatorHeartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorDelegatedVoting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatedTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorDelegatedVoting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorDelegatedVoting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorDelegatedVoting(ctx, req.(*DelegatedTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_IndexerVoting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexerVotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).IndexerVoting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_IndexerVoting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).IndexerVoting(ctx, req.(*IndexerVotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorQuash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuashTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorQuash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorQuash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorQuash(ctx, req.(*QuashTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorFastQuorum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FastQuorumTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorFastQuorum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorFastQuorum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorFastQuorum(ctx, req.(*FastQuorumTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorRevoke(ctx, req.(*RevokeTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorCompliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorCompliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorCompliance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorCompliance(ctx, req.(*ComplianceTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorBurnSBT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnSBTTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorBurnSBT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorBurnSBT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorBurnSBT(ctx, req.(*BurnSBTTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_Nonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).Nonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_Nonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).Nonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorCoin(ctx, req.(*CoinTXN))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_StreamBlockAttestation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidatorServiceServer).StreamBlockAttestation(&validatorServiceStreamBlockAttestationServer{stream})
}

type ValidatorService_StreamBlockAttestationServer interface {
	Send(*DataChunk) error
	Recv() (*DataChunk, error)
	grpc.ServerStream
}

type validatorServiceStreamBlockAttestationServer struct {
	grpc.ServerStream
}

func (x *validatorServiceStreamBlockAttestationServer) Send(m *DataChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validatorServiceStreamBlockAttestationServer) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValidatorService_StreamRequestSlashed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidatorServiceServer).StreamRequestSlashed(&validatorServiceStreamRequestSlashedServer{stream})
}

type ValidatorService_StreamRequestSlashedServer interface {
	Send(*DataChunk) error
	Recv() (*SlashedRequest, error)
	grpc.ServerStream
}

type validatorServiceStreamRequestSlashedServer struct {
	grpc.ServerStream
}

func (x *validatorServiceStreamRequestSlashedServer) Send(m *DataChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validatorServiceStreamRequestSlashedServer) Recv() (*SlashedRequest, error) {
	m := new(SlashedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValidatorService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_Gossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TXNGossip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).Gossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_Gossip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).Gossip(ctx, req.(*TXNGossip))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ValidatorAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowanceTXN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ValidatorAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ValidatorAllowance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ValidatorAllowance(ctx, req.(*AllowanceTXN))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidatorService_ServiceDesc is the grpc.ServiceDesc for ValidatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zera_validator.ValidatorService",
	HandlerType: (*ValidatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _ValidatorService_Broadcast_Handler,
		},
		{
			MethodName: "ValidatorRegistration",
			Handler:    _ValidatorService_ValidatorRegistration_Handler,
		},
		{
			MethodName: "SyncValidatorList",
			Handler:    _ValidatorService_SyncValidatorList_Handler,
		},
		{
			MethodName: "ValidatorMint",
			Handler:    _ValidatorService_ValidatorMint_Handler,
		},
		{
			MethodName: "ValidatorItemMint",
			Handler:    _ValidatorService_ValidatorItemMint_Handler,
		},
		{
			MethodName: "ValidatorContract",
			Handler:    _ValidatorService_ValidatorContract_Handler,
		},
		{
			MethodName: "ValidatorGovernProposal",
			Handler:    _ValidatorService_ValidatorGovernProposal_Handler,
		},
		{
			MethodName: "ValidatorGovernVote",
			Handler:    _ValidatorService_ValidatorGovernVote_Handler,
		},
		{
			MethodName: "ValidatorSmartContract",
			Handler:    _ValidatorService_ValidatorSmartContract_Handler,
		},
		{
			MethodName: "ValidatorSmartContractInstantiate",
			Handler:    _ValidatorService_ValidatorSmartContractInstantiate_Handler,
		},
		{
			MethodName: "ValidatorSmartContractExecute",
			Handler:    _ValidatorService_ValidatorSmartContractExecute_Handler,
		},
		{
			MethodName: "ValidatorExpenseRatio",
			Handler:    _ValidatorService_ValidatorExpenseRatio_Handler,
		},
		{
			MethodName: "ValidatorNFT",
			Handler:    _ValidatorService_ValidatorNFT_Handler,
		},
		{
			MethodName: "ValidatorContractUpdate",
			Handler:    _ValidatorService_ValidatorContractUpdate_Handler,
		},
		{
			MethodName: "ValidatorHeartbeat",
			Handler:    _ValidatorService_ValidatorHeartbeat_Handler,
		},
		{
			MethodName: "ValidatorDelegatedVoting",
			Handler:    _ValidatorService_ValidatorDelegatedVoting_Handler,
		},
		{
			MethodName: "IndexerVoting",
			Handler:    _ValidatorService_IndexerVoting_Handler,
		},
		{
			MethodName: "ValidatorQuash",
			Handler:    _ValidatorService_ValidatorQuash_Handler,
		},
		{
			MethodName: "ValidatorFastQuorum",
			Handler:    _ValidatorService_ValidatorFastQuorum_Handler,
		},
		{
			MethodName: "ValidatorRevoke",
			Handler:    _ValidatorService_ValidatorRevoke_Handler,
		},
		{
			MethodName: "ValidatorCompliance",
			Handler:    _ValidatorService_ValidatorCompliance_Handler,
		},
		{
			MethodName: "ValidatorBurnSBT",
			Handler:    _ValidatorService_ValidatorBurnSBT_Handler,
		},
		{
			MethodName: "Nonce",
			Handler:    _ValidatorService_Nonce_Handler,
		},
		{
			MethodName: "ValidatorCoin",
			Handler:    _ValidatorService_ValidatorCoin_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _ValidatorService_Balance_Handler,
		},
		{
			MethodName: "Gossip",
			Handler:    _ValidatorService_Gossip_Handler,
		},
		{
			MethodName: "ValidatorAllowance",
			Handler:    _ValidatorService_ValidatorAllowance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFailedBlock",
			Handler:       _ValidatorService_StreamFailedBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamBroadcast",
			Handler:       _ValidatorService_StreamBroadcast_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncBlockchain",
			Handler:       _ValidatorService_SyncBlockchain_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamGossip",
			Handler:       _ValidatorService_StreamGossip_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamBlockAttestation",
			Handler:       _ValidatorService_StreamBlockAttestation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamRequestSlashed",
			Handler:       _ValidatorService_StreamRequestSlashed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "validator.proto",
}
