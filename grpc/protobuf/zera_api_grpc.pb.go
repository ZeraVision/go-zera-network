// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: zera_api.proto

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APIService_Balance_FullMethodName                      = "/zera_api.APIService/Balance"
	APIService_Nonce_FullMethodName                        = "/zera_api.APIService/Nonce"
	APIService_ContractFee_FullMethodName                  = "/zera_api.APIService/ContractFee"
	APIService_BaseFee_FullMethodName                      = "/zera_api.APIService/BaseFee"
	APIService_GetTokenFeeInfo_FullMethodName              = "/zera_api.APIService/GetTokenFeeInfo"
	APIService_Items_FullMethodName                        = "/zera_api.APIService/Items"
	APIService_Denomination_FullMethodName                 = "/zera_api.APIService/Denomination"
	APIService_Database_FullMethodName                     = "/zera_api.APIService/Database"
	APIService_Block_FullMethodName                        = "/zera_api.APIService/Block"
	APIService_ProposalLedger_FullMethodName               = "/zera_api.APIService/ProposalLedger"
	APIService_SmartContractActivityRequest_FullMethodName = "/zera_api.APIService/SmartContractActivityRequest"
	APIService_SmartContractEvents_FullMethodName          = "/zera_api.APIService/SmartContractEvents"
	APIService_Contract_FullMethodName                     = "/zera_api.APIService/Contract"
	APIService_SmartContractEventsSearch_FullMethodName    = "/zera_api.APIService/SmartContractEventsSearch"
)

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	Nonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error)
	ContractFee(ctx context.Context, in *ContractFeeRequest, opts ...grpc.CallOption) (*ContractFeeResponse, error)
	BaseFee(ctx context.Context, in *BaseFeeRequest, opts ...grpc.CallOption) (*BaseFeeResponse, error)
	GetTokenFeeInfo(ctx context.Context, in *TokenFeeInfoRequest, opts ...grpc.CallOption) (*TokenFeeInfoResponse, error)
	Items(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	Denomination(ctx context.Context, in *DenominationRequest, opts ...grpc.CallOption) (*DenominationResponse, error)
	Database(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error)
	Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	ProposalLedger(ctx context.Context, in *ProposalLedgerRequest, opts ...grpc.CallOption) (*ProposalLedgerResponse, error)
	SmartContractActivityRequest(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SmartContractEvents(ctx context.Context, in *SmartContractEventsResponse, opts ...grpc.CallOption) (*empty.Empty, error)
	Contract(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*ContractResponse, error)
	SmartContractEventsSearch(ctx context.Context, in *SmartContractEventsSearchRequest, opts ...grpc.CallOption) (*SmartContractEventsSearchResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, APIService_Balance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Nonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error) {
	out := new(NonceResponse)
	err := c.cc.Invoke(ctx, APIService_Nonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ContractFee(ctx context.Context, in *ContractFeeRequest, opts ...grpc.CallOption) (*ContractFeeResponse, error) {
	out := new(ContractFeeResponse)
	err := c.cc.Invoke(ctx, APIService_ContractFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) BaseFee(ctx context.Context, in *BaseFeeRequest, opts ...grpc.CallOption) (*BaseFeeResponse, error) {
	out := new(BaseFeeResponse)
	err := c.cc.Invoke(ctx, APIService_BaseFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetTokenFeeInfo(ctx context.Context, in *TokenFeeInfoRequest, opts ...grpc.CallOption) (*TokenFeeInfoResponse, error) {
	out := new(TokenFeeInfoResponse)
	err := c.cc.Invoke(ctx, APIService_GetTokenFeeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Items(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, APIService_Items_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Denomination(ctx context.Context, in *DenominationRequest, opts ...grpc.CallOption) (*DenominationResponse, error) {
	out := new(DenominationResponse)
	err := c.cc.Invoke(ctx, APIService_Denomination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Database(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error) {
	out := new(DatabaseResponse)
	err := c.cc.Invoke(ctx, APIService_Database_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, APIService_Block_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ProposalLedger(ctx context.Context, in *ProposalLedgerRequest, opts ...grpc.CallOption) (*ProposalLedgerResponse, error) {
	out := new(ProposalLedgerResponse)
	err := c.cc.Invoke(ctx, APIService_ProposalLedger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SmartContractActivityRequest(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, APIService_SmartContractActivityRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SmartContractEvents(ctx context.Context, in *SmartContractEventsResponse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, APIService_SmartContractEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Contract(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, APIService_Contract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SmartContractEventsSearch(ctx context.Context, in *SmartContractEventsSearchRequest, opts ...grpc.CallOption) (*SmartContractEventsSearchResponse, error) {
	out := new(SmartContractEventsSearchResponse)
	err := c.cc.Invoke(ctx, APIService_SmartContractEventsSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	Nonce(context.Context, *NonceRequest) (*NonceResponse, error)
	ContractFee(context.Context, *ContractFeeRequest) (*ContractFeeResponse, error)
	BaseFee(context.Context, *BaseFeeRequest) (*BaseFeeResponse, error)
	GetTokenFeeInfo(context.Context, *TokenFeeInfoRequest) (*TokenFeeInfoResponse, error)
	Items(context.Context, *ItemRequest) (*ItemResponse, error)
	Denomination(context.Context, *DenominationRequest) (*DenominationResponse, error)
	Database(context.Context, *DatabaseRequest) (*DatabaseResponse, error)
	Block(context.Context, *BlockRequest) (*BlockResponse, error)
	ProposalLedger(context.Context, *ProposalLedgerRequest) (*ProposalLedgerResponse, error)
	SmartContractActivityRequest(context.Context, *ActivityRequest) (*empty.Empty, error)
	SmartContractEvents(context.Context, *SmartContractEventsResponse) (*empty.Empty, error)
	Contract(context.Context, *ContractRequest) (*ContractResponse, error)
	SmartContractEventsSearch(context.Context, *SmartContractEventsSearchRequest) (*SmartContractEventsSearchResponse, error)
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedAPIServiceServer) Nonce(context.Context, *NonceRequest) (*NonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nonce not implemented")
}
func (UnimplementedAPIServiceServer) ContractFee(context.Context, *ContractFeeRequest) (*ContractFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractFee not implemented")
}
func (UnimplementedAPIServiceServer) BaseFee(context.Context, *BaseFeeRequest) (*BaseFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseFee not implemented")
}
func (UnimplementedAPIServiceServer) GetTokenFeeInfo(context.Context, *TokenFeeInfoRequest) (*TokenFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenFeeInfo not implemented")
}
func (UnimplementedAPIServiceServer) Items(context.Context, *ItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Items not implemented")
}
func (UnimplementedAPIServiceServer) Denomination(context.Context, *DenominationRequest) (*DenominationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Denomination not implemented")
}
func (UnimplementedAPIServiceServer) Database(context.Context, *DatabaseRequest) (*DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Database not implemented")
}
func (UnimplementedAPIServiceServer) Block(context.Context, *BlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedAPIServiceServer) ProposalLedger(context.Context, *ProposalLedgerRequest) (*ProposalLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalLedger not implemented")
}
func (UnimplementedAPIServiceServer) SmartContractActivityRequest(context.Context, *ActivityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmartContractActivityRequest not implemented")
}
func (UnimplementedAPIServiceServer) SmartContractEvents(context.Context, *SmartContractEventsResponse) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmartContractEvents not implemented")
}
func (UnimplementedAPIServiceServer) Contract(context.Context, *ContractRequest) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contract not implemented")
}
func (UnimplementedAPIServiceServer) SmartContractEventsSearch(context.Context, *SmartContractEventsSearchRequest) (*SmartContractEventsSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmartContractEventsSearch not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Nonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Nonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Nonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Nonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ContractFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ContractFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_ContractFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ContractFee(ctx, req.(*ContractFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_BaseFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).BaseFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_BaseFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).BaseFee(ctx, req.(*BaseFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetTokenFeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTokenFeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetTokenFeeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTokenFeeInfo(ctx, req.(*TokenFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Items_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Items(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Items_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Items(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Denomination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenominationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Denomination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Denomination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Denomination(ctx, req.(*DenominationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Database_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Database(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Database_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Database(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Block_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Block(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ProposalLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ProposalLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_ProposalLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ProposalLedger(ctx, req.(*ProposalLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SmartContractActivityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SmartContractActivityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_SmartContractActivityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SmartContractActivityRequest(ctx, req.(*ActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SmartContractEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartContractEventsResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SmartContractEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_SmartContractEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SmartContractEvents(ctx, req.(*SmartContractEventsResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Contract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Contract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_Contract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Contract(ctx, req.(*ContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SmartContractEventsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartContractEventsSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SmartContractEventsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_SmartContractEventsSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SmartContractEventsSearch(ctx, req.(*SmartContractEventsSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zera_api.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Balance",
			Handler:    _APIService_Balance_Handler,
		},
		{
			MethodName: "Nonce",
			Handler:    _APIService_Nonce_Handler,
		},
		{
			MethodName: "ContractFee",
			Handler:    _APIService_ContractFee_Handler,
		},
		{
			MethodName: "BaseFee",
			Handler:    _APIService_BaseFee_Handler,
		},
		{
			MethodName: "GetTokenFeeInfo",
			Handler:    _APIService_GetTokenFeeInfo_Handler,
		},
		{
			MethodName: "Items",
			Handler:    _APIService_Items_Handler,
		},
		{
			MethodName: "Denomination",
			Handler:    _APIService_Denomination_Handler,
		},
		{
			MethodName: "Database",
			Handler:    _APIService_Database_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _APIService_Block_Handler,
		},
		{
			MethodName: "ProposalLedger",
			Handler:    _APIService_ProposalLedger_Handler,
		},
		{
			MethodName: "SmartContractActivityRequest",
			Handler:    _APIService_SmartContractActivityRequest_Handler,
		},
		{
			MethodName: "SmartContractEvents",
			Handler:    _APIService_SmartContractEvents_Handler,
		},
		{
			MethodName: "Contract",
			Handler:    _APIService_Contract_Handler,
		},
		{
			MethodName: "SmartContractEventsSearch",
			Handler:    _APIService_SmartContractEventsSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zera_api.proto",
}
