syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "txn.proto";

package zera_validator;

option go_package = "./grpc/protobuf";

option optimize_for = SPEED;

service ValidatorService{
    rpc StreamBroadcast(stream DataChunk) returns (google.protobuf.Empty);
    rpc Broadcast(Block) returns (google.protobuf.Empty);
    rpc SyncBlockchain(BlockSync) returns (stream DataChunk);
    rpc ValidatorRegistration(zera_txn.ValidatorRegistration) returns (google.protobuf.Empty);
    rpc SyncValidatorList(ValidatorSyncRequest) returns (ValidatorSync);
    rpc ValidatorCoin(zera_txn.CoinTXN) returns (google.protobuf.Empty);
    rpc ValidatorMint(zera_txn.MintTXN) returns (google.protobuf.Empty);
    rpc ValidatorItemMint(zera_txn.ItemizedMintTXN) returns (google.protobuf.Empty);
    rpc ValidatorContract(zera_txn.InstrumentContract) returns (google.protobuf.Empty); 
    rpc ValidatorGovernProposal(zera_txn.GovernanceProposal) returns (google.protobuf.Empty);
    rpc ValidatorGovernVote(zera_txn.GovernanceVote) returns (google.protobuf.Empty);
    rpc ValidatorSmartContract(zera_txn.SmartContractTXN) returns (google.protobuf.Empty);
    rpc ValidatorSmartContractExecute(zera_txn.SmartContractExecuteTXN) returns (google.protobuf.Empty);
    rpc ValidatorCurrencyEquiv(zera_txn.SelfCurrencyEquiv) returns (google.protobuf.Empty);
    rpc ValidatorAuthCurrencyEquiv(zera_txn.AuthorizedCurrencyEquiv) returns (google.protobuf.Empty);
    rpc ValidatorExpenseRatio(zera_txn.ExpenseRatioTXN) returns (google.protobuf.Empty);
    rpc ValidatorNFT(zera_txn.NFTTXN) returns (google.protobuf.Empty);
    rpc ValidatorContractUpdate(zera_txn.ContractUpdateTXN) returns (google.protobuf.Empty);
}

message DataChunk{
    bytes chunk_data = 1;
    int32 chunk_number = 2;
    optional int32 total_chunks = 3;
}
message ValidatorSyncRequest {
  bytes public_key = 1;
  bytes signature = 2;
}
message ValidatorSync{
    repeated zera_txn.Validator validators = 1;
    optional bytes signature = 2;
    bytes public_key = 3;
}

message BlockSync{
    bytes last_key = 1;
    uint64 amount = 2;
    optional bytes signature = 3;
    bytes public_key = 4;
}
message BlockHeader{
	optional uint64 version = 1;
	optional bytes previous_block_hash = 2;
    optional bytes hash = 3;
	google.protobuf.Timestamp timestamp = 4;
	uint64 nonce = 5;
	uint64 block_height = 6;
    bytes fee_address = 7;
    optional bytes signature = 8;
    bytes public_key = 9;
    optional bytes merkle_root = 10;
}
message Block{
	optional BlockHeader block_header = 1;
	zera_txn.TXNS transactions = 2;
	optional bytes signature = 4;
    optional bytes public_key = 5;
}
message BlockBatch{
    repeated Block blocks = 1;
    bool last_block = 2;
    optional bytes signature = 3;
    bytes public_key = 4;
}

message NFT{
    bytes holder_address = 1;
    string contract_id = 2;
    string item_id = 3;
    optional string voting_weight = 46;
}
