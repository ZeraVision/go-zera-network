// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0--rc1
// source: validator.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TXN_STATUS int32

const (
	TXN_STATUS_OK                                    TXN_STATUS = 0
	TXN_STATUS_INVALID_PARAMETERS                    TXN_STATUS = 1
	TXN_STATUS_INSUFFICIENT_AMOUNT                   TXN_STATUS = 2
	TXN_STATUS_INSUFFICIENT_CONTRACT_FEES            TXN_STATUS = 3
	TXN_STATUS_AUTHORIZED_INSUFFICIENT_FEES          TXN_STATUS = 4
	TXN_STATUS_AUTHORIZED_INSUFFICIENT_CONTRACT_FEES TXN_STATUS = 5
	TXN_STATUS_INVALID_CONTRACT                      TXN_STATUS = 6
	TXN_STATUS_INVALID_AUTH_KEY                      TXN_STATUS = 7
	TXN_STATUS_INVALID_WALLET_ADDRESS                TXN_STATUS = 8
	TXN_STATUS_INVALID_MULTI_TRANSACTION             TXN_STATUS = 9
	TXN_STATUS_INVALID_CONTRACT_PARAMETERS           TXN_STATUS = 10
	TXN_STATUS_INVALID_CONTRACT_FEE_ID               TXN_STATUS = 11
	TXN_STATUS_INVALID_UINT256                       TXN_STATUS = 12
	TXN_STATUS_EXCEEDED_MAX_SUPPLY                   TXN_STATUS = 13
	TXN_STATUS_INVALID_NFT                           TXN_STATUS = 14
	TXN_STATUS_NFT_OWNERSHIP                         TXN_STATUS = 15
	TXN_STATUS_VALIDATOR_ADDRESS                     TXN_STATUS = 16
	TXN_STATUS_CONTRACT_HAS_NO_GOVERNANCE            TXN_STATUS = 17
	TXN_STATUS_INVALID_BASE_FEE_ID                   TXN_STATUS = 18
	TXN_STATUS_EXPENSE_RATIO_DUPLICATE               TXN_STATUS = 19
	TXN_STATUS_RESTRICTED_SYMBOL                     TXN_STATUS = 20
	TXN_STATUS_INVALID_PROPOSAL_ID                   TXN_STATUS = 21
	TXN_STATUS_PROPOSAL_NOT_IN_VOTING_PERIOD         TXN_STATUS = 22
	TXN_STATUS_TIME_DELAY_INITIALIZED                TXN_STATUS = 23
	TXN_STATUS_INVALID_TXN_HASH                      TXN_STATUS = 24
	TXN_STATUS_INVALID_TXN_TYPE                      TXN_STATUS = 25
	TXN_STATUS_TIME_DELAY_EXPIRED                    TXN_STATUS = 26
	TXN_STATUS_DUPLICATE_AUTH_KEY                    TXN_STATUS = 27
)

// Enum value maps for TXN_STATUS.
var (
	TXN_STATUS_name = map[int32]string{
		0:  "OK",
		1:  "INVALID_PARAMETERS",
		2:  "INSUFFICIENT_AMOUNT",
		3:  "INSUFFICIENT_CONTRACT_FEES",
		4:  "AUTHORIZED_INSUFFICIENT_FEES",
		5:  "AUTHORIZED_INSUFFICIENT_CONTRACT_FEES",
		6:  "INVALID_CONTRACT",
		7:  "INVALID_AUTH_KEY",
		8:  "INVALID_WALLET_ADDRESS",
		9:  "INVALID_MULTI_TRANSACTION",
		10: "INVALID_CONTRACT_PARAMETERS",
		11: "INVALID_CONTRACT_FEE_ID",
		12: "INVALID_UINT256",
		13: "EXCEEDED_MAX_SUPPLY",
		14: "INVALID_NFT",
		15: "NFT_OWNERSHIP",
		16: "VALIDATOR_ADDRESS",
		17: "CONTRACT_HAS_NO_GOVERNANCE",
		18: "INVALID_BASE_FEE_ID",
		19: "EXPENSE_RATIO_DUPLICATE",
		20: "RESTRICTED_SYMBOL",
		21: "INVALID_PROPOSAL_ID",
		22: "PROPOSAL_NOT_IN_VOTING_PERIOD",
		23: "TIME_DELAY_INITIALIZED",
		24: "INVALID_TXN_HASH",
		25: "INVALID_TXN_TYPE",
		26: "TIME_DELAY_EXPIRED",
		27: "DUPLICATE_AUTH_KEY",
	}
	TXN_STATUS_value = map[string]int32{
		"OK":                                    0,
		"INVALID_PARAMETERS":                    1,
		"INSUFFICIENT_AMOUNT":                   2,
		"INSUFFICIENT_CONTRACT_FEES":            3,
		"AUTHORIZED_INSUFFICIENT_FEES":          4,
		"AUTHORIZED_INSUFFICIENT_CONTRACT_FEES": 5,
		"INVALID_CONTRACT":                      6,
		"INVALID_AUTH_KEY":                      7,
		"INVALID_WALLET_ADDRESS":                8,
		"INVALID_MULTI_TRANSACTION":             9,
		"INVALID_CONTRACT_PARAMETERS":           10,
		"INVALID_CONTRACT_FEE_ID":               11,
		"INVALID_UINT256":                       12,
		"EXCEEDED_MAX_SUPPLY":                   13,
		"INVALID_NFT":                           14,
		"NFT_OWNERSHIP":                         15,
		"VALIDATOR_ADDRESS":                     16,
		"CONTRACT_HAS_NO_GOVERNANCE":            17,
		"INVALID_BASE_FEE_ID":                   18,
		"EXPENSE_RATIO_DUPLICATE":               19,
		"RESTRICTED_SYMBOL":                     20,
		"INVALID_PROPOSAL_ID":                   21,
		"PROPOSAL_NOT_IN_VOTING_PERIOD":         22,
		"TIME_DELAY_INITIALIZED":                23,
		"INVALID_TXN_HASH":                      24,
		"INVALID_TXN_TYPE":                      25,
		"TIME_DELAY_EXPIRED":                    26,
		"DUPLICATE_AUTH_KEY":                    27,
	}
)

func (x TXN_STATUS) Enum() *TXN_STATUS {
	p := new(TXN_STATUS)
	*p = x
	return p
}

func (x TXN_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TXN_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_validator_proto_enumTypes[0].Descriptor()
}

func (TXN_STATUS) Type() protoreflect.EnumType {
	return &file_validator_proto_enumTypes[0]
}

func (x TXN_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TXN_STATUS.Descriptor instead.
func (TXN_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{0}
}

type TRANSACTION_TYPE int32

const (
	TRANSACTION_TYPE_COIN_TYPE                      TRANSACTION_TYPE = 0
	TRANSACTION_TYPE_FOUNDATION_TYPE                TRANSACTION_TYPE = 2
	TRANSACTION_TYPE_MINT_TYPE                      TRANSACTION_TYPE = 1
	TRANSACTION_TYPE_ITEM_MINT_TYPE                 TRANSACTION_TYPE = 3
	TRANSACTION_TYPE_CONTRACT_TXN_TYPE              TRANSACTION_TYPE = 4
	TRANSACTION_TYPE_VOTE_TYPE                      TRANSACTION_TYPE = 5
	TRANSACTION_TYPE_PROPOSAL_TYPE                  TRANSACTION_TYPE = 6
	TRANSACTION_TYPE_SMART_CONTRACT_TYPE            TRANSACTION_TYPE = 7
	TRANSACTION_TYPE_SMART_CONTRACT_EXECUTE_TYPE    TRANSACTION_TYPE = 8
	TRANSACTION_TYPE_SELF_CURRENCY_EQUIV_TYPE       TRANSACTION_TYPE = 9
	TRANSACTION_TYPE_AUTHORIZED_CURRENCY_EQUIV_TYPE TRANSACTION_TYPE = 10
	TRANSACTION_TYPE_EXPENSE_RATIO_TYPE             TRANSACTION_TYPE = 11
	TRANSACTION_TYPE_NFT_TYPE                       TRANSACTION_TYPE = 12
	TRANSACTION_TYPE_UPDATE_CONTRACT_TYPE           TRANSACTION_TYPE = 13
	TRANSACTION_TYPE_VALIDATOR_REGISTRATION_TYPE    TRANSACTION_TYPE = 14
	TRANSACTION_TYPE_VALIDATOR_HEARTBEAT_TYPE       TRANSACTION_TYPE = 15
	TRANSACTION_TYPE_PROPOSAL_RESULT_TYPE           TRANSACTION_TYPE = 16
	TRANSACTION_TYPE_DELEGATED_VOTING_TYPE          TRANSACTION_TYPE = 17
)

// Enum value maps for TRANSACTION_TYPE.
var (
	TRANSACTION_TYPE_name = map[int32]string{
		0:  "COIN_TYPE",
		2:  "FOUNDATION_TYPE",
		1:  "MINT_TYPE",
		3:  "ITEM_MINT_TYPE",
		4:  "CONTRACT_TXN_TYPE",
		5:  "VOTE_TYPE",
		6:  "PROPOSAL_TYPE",
		7:  "SMART_CONTRACT_TYPE",
		8:  "SMART_CONTRACT_EXECUTE_TYPE",
		9:  "SELF_CURRENCY_EQUIV_TYPE",
		10: "AUTHORIZED_CURRENCY_EQUIV_TYPE",
		11: "EXPENSE_RATIO_TYPE",
		12: "NFT_TYPE",
		13: "UPDATE_CONTRACT_TYPE",
		14: "VALIDATOR_REGISTRATION_TYPE",
		15: "VALIDATOR_HEARTBEAT_TYPE",
		16: "PROPOSAL_RESULT_TYPE",
		17: "DELEGATED_VOTING_TYPE",
	}
	TRANSACTION_TYPE_value = map[string]int32{
		"COIN_TYPE":                      0,
		"FOUNDATION_TYPE":                2,
		"MINT_TYPE":                      1,
		"ITEM_MINT_TYPE":                 3,
		"CONTRACT_TXN_TYPE":              4,
		"VOTE_TYPE":                      5,
		"PROPOSAL_TYPE":                  6,
		"SMART_CONTRACT_TYPE":            7,
		"SMART_CONTRACT_EXECUTE_TYPE":    8,
		"SELF_CURRENCY_EQUIV_TYPE":       9,
		"AUTHORIZED_CURRENCY_EQUIV_TYPE": 10,
		"EXPENSE_RATIO_TYPE":             11,
		"NFT_TYPE":                       12,
		"UPDATE_CONTRACT_TYPE":           13,
		"VALIDATOR_REGISTRATION_TYPE":    14,
		"VALIDATOR_HEARTBEAT_TYPE":       15,
		"PROPOSAL_RESULT_TYPE":           16,
		"DELEGATED_VOTING_TYPE":          17,
	}
)

func (x TRANSACTION_TYPE) Enum() *TRANSACTION_TYPE {
	p := new(TRANSACTION_TYPE)
	*p = x
	return p
}

func (x TRANSACTION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRANSACTION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_validator_proto_enumTypes[1].Descriptor()
}

func (TRANSACTION_TYPE) Type() protoreflect.EnumType {
	return &file_validator_proto_enumTypes[1]
}

func (x TRANSACTION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRANSACTION_TYPE.Descriptor instead.
func (TRANSACTION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{1}
}

// ENUMS
type LANGUAGE int32

const (
	LANGUAGE_CPLUSPLUS  LANGUAGE = 0
	LANGUAGE_RUST       LANGUAGE = 1
	LANGUAGE_PYTHON     LANGUAGE = 2
	LANGUAGE_JAVASCRIPT LANGUAGE = 3
)

// Enum value maps for LANGUAGE.
var (
	LANGUAGE_name = map[int32]string{
		0: "CPLUSPLUS",
		1: "RUST",
		2: "PYTHON",
		3: "JAVASCRIPT",
	}
	LANGUAGE_value = map[string]int32{
		"CPLUSPLUS":  0,
		"RUST":       1,
		"PYTHON":     2,
		"JAVASCRIPT": 3,
	}
)

func (x LANGUAGE) Enum() *LANGUAGE {
	p := new(LANGUAGE)
	*p = x
	return p
}

func (x LANGUAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LANGUAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_validator_proto_enumTypes[2].Descriptor()
}

func (LANGUAGE) Type() protoreflect.EnumType {
	return &file_validator_proto_enumTypes[2]
}

func (x LANGUAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LANGUAGE.Descriptor instead.
func (LANGUAGE) EnumDescriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{2}
}

type PROPOSAL_PERIOD int32

const (
	PROPOSAL_PERIOD_DAYS   PROPOSAL_PERIOD = 0
	PROPOSAL_PERIOD_MONTHS PROPOSAL_PERIOD = 1
)

// Enum value maps for PROPOSAL_PERIOD.
var (
	PROPOSAL_PERIOD_name = map[int32]string{
		0: "DAYS",
		1: "MONTHS",
	}
	PROPOSAL_PERIOD_value = map[string]int32{
		"DAYS":   0,
		"MONTHS": 1,
	}
)

func (x PROPOSAL_PERIOD) Enum() *PROPOSAL_PERIOD {
	p := new(PROPOSAL_PERIOD)
	*p = x
	return p
}

func (x PROPOSAL_PERIOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROPOSAL_PERIOD) Descriptor() protoreflect.EnumDescriptor {
	return file_validator_proto_enumTypes[3].Descriptor()
}

func (PROPOSAL_PERIOD) Type() protoreflect.EnumType {
	return &file_validator_proto_enumTypes[3]
}

func (x PROPOSAL_PERIOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROPOSAL_PERIOD.Descriptor instead.
func (PROPOSAL_PERIOD) EnumDescriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{3}
}

type VARIABLE_TYPE int32

const (
	VARIABLE_TYPE_INT       VARIABLE_TYPE = 0
	VARIABLE_TYPE_SHORT     VARIABLE_TYPE = 1
	VARIABLE_TYPE_LONG      VARIABLE_TYPE = 2
	VARIABLE_TYPE_LONG_LONG VARIABLE_TYPE = 3
	VARIABLE_TYPE_BOOL      VARIABLE_TYPE = 4
	VARIABLE_TYPE_STRING    VARIABLE_TYPE = 5
)

// Enum value maps for VARIABLE_TYPE.
var (
	VARIABLE_TYPE_name = map[int32]string{
		0: "INT",
		1: "SHORT",
		2: "LONG",
		3: "LONG_LONG",
		4: "BOOL",
		5: "STRING",
	}
	VARIABLE_TYPE_value = map[string]int32{
		"INT":       0,
		"SHORT":     1,
		"LONG":      2,
		"LONG_LONG": 3,
		"BOOL":      4,
		"STRING":    5,
	}
)

func (x VARIABLE_TYPE) Enum() *VARIABLE_TYPE {
	p := new(VARIABLE_TYPE)
	*p = x
	return p
}

func (x VARIABLE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VARIABLE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_validator_proto_enumTypes[4].Descriptor()
}

func (VARIABLE_TYPE) Type() protoreflect.EnumType {
	return &file_validator_proto_enumTypes[4]
}

func (x VARIABLE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VARIABLE_TYPE.Descriptor instead.
func (VARIABLE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{4}
}

// SUB MESSAGES
type CONTRACT_FEE_TYPE int32

const (
	CONTRACT_FEE_TYPE_FIXED          CONTRACT_FEE_TYPE = 0
	CONTRACT_FEE_TYPE_CUR_EQUIVALENT CONTRACT_FEE_TYPE = 1
	CONTRACT_FEE_TYPE_PERCENTAGE     CONTRACT_FEE_TYPE = 2
)

// Enum value maps for CONTRACT_FEE_TYPE.
var (
	CONTRACT_FEE_TYPE_name = map[int32]string{
		0: "FIXED",
		1: "CUR_EQUIVALENT",
		2: "PERCENTAGE",
	}
	CONTRACT_FEE_TYPE_value = map[string]int32{
		"FIXED":          0,
		"CUR_EQUIVALENT": 1,
		"PERCENTAGE":     2,
	}
)

func (x CONTRACT_FEE_TYPE) Enum() *CONTRACT_FEE_TYPE {
	p := new(CONTRACT_FEE_TYPE)
	*p = x
	return p
}

func (x CONTRACT_FEE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONTRACT_FEE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_validator_proto_enumTypes[5].Descriptor()
}

func (CONTRACT_FEE_TYPE) Type() protoreflect.EnumType {
	return &file_validator_proto_enumTypes[5]
}

func (x CONTRACT_FEE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONTRACT_FEE_TYPE.Descriptor instead.
func (CONTRACT_FEE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{5}
}

type GOVERNANCE_TYPE int32

const (
	GOVERNANCE_TYPE_STAGED    GOVERNANCE_TYPE = 0 //Multiple stages of governance, must pass regular quorum to get to next stage. Up to 99 stages specified by contract creator (in days)
	GOVERNANCE_TYPE_CYCLE     GOVERNANCE_TYPE = 1 //1 specified voting stage based on days repeat this process once the cycle is complete (in days)
	GOVERNANCE_TYPE_STAGGERED GOVERNANCE_TYPE = 2 //Every proposal has the same voting period length and starts when proposal is made (in days)
	GOVERNANCE_TYPE_ADAPTIVE  GOVERNANCE_TYPE = 3 //Every proposal has its own specified voting period (in days)
)

// Enum value maps for GOVERNANCE_TYPE.
var (
	GOVERNANCE_TYPE_name = map[int32]string{
		0: "STAGED",
		1: "CYCLE",
		2: "STAGGERED",
		3: "ADAPTIVE",
	}
	GOVERNANCE_TYPE_value = map[string]int32{
		"STAGED":    0,
		"CYCLE":     1,
		"STAGGERED": 2,
		"ADAPTIVE":  3,
	}
)

func (x GOVERNANCE_TYPE) Enum() *GOVERNANCE_TYPE {
	p := new(GOVERNANCE_TYPE)
	*p = x
	return p
}

func (x GOVERNANCE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GOVERNANCE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_validator_proto_enumTypes[6].Descriptor()
}

func (GOVERNANCE_TYPE) Type() protoreflect.EnumType {
	return &file_validator_proto_enumTypes[6]
}

func (x GOVERNANCE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GOVERNANCE_TYPE.Descriptor instead.
func (GOVERNANCE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{6}
}

type CONTRACT_TYPE int32

const (
	CONTRACT_TYPE_TOKEN CONTRACT_TYPE = 0
	CONTRACT_TYPE_NFT   CONTRACT_TYPE = 1
	CONTRACT_TYPE_SBT   CONTRACT_TYPE = 2
)

// Enum value maps for CONTRACT_TYPE.
var (
	CONTRACT_TYPE_name = map[int32]string{
		0: "TOKEN",
		1: "NFT",
		2: "SBT",
	}
	CONTRACT_TYPE_value = map[string]int32{
		"TOKEN": 0,
		"NFT":   1,
		"SBT":   2,
	}
)

func (x CONTRACT_TYPE) Enum() *CONTRACT_TYPE {
	p := new(CONTRACT_TYPE)
	*p = x
	return p
}

func (x CONTRACT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONTRACT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_validator_proto_enumTypes[7].Descriptor()
}

func (CONTRACT_TYPE) Type() protoreflect.EnumType {
	return &file_validator_proto_enumTypes[7]
}

func (x CONTRACT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONTRACT_TYPE.Descriptor instead.
func (CONTRACT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{7}
}

type AddRemoveDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddRemove  bool   `protobuf:"varint,1,opt,name=add_remove,json=addRemove,proto3" json:"add_remove,omitempty"`
	ContractId string `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *AddRemoveDelegate) Reset() {
	*x = AddRemoveDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRemoveDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRemoveDelegate) ProtoMessage() {}

func (x *AddRemoveDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRemoveDelegate.ProtoReflect.Descriptor instead.
func (*AddRemoveDelegate) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{0}
}

func (x *AddRemoveDelegate) GetAddRemove() bool {
	if x != nil {
		return x.AddRemove
	}
	return false
}

func (x *AddRemoveDelegate) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type DelegatedVotingTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base          *BaseTXN        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DelegateVotes []*DelegateVote `protobuf:"bytes,2,rep,name=delegate_votes,json=delegateVotes,proto3" json:"delegate_votes,omitempty"`
	DelegateFees  []*DelegateFees `protobuf:"bytes,3,rep,name=delegate_fees,json=delegateFees,proto3" json:"delegate_fees,omitempty"`
}

func (x *DelegatedVotingTXN) Reset() {
	*x = DelegatedVotingTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatedVotingTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedVotingTXN) ProtoMessage() {}

func (x *DelegatedVotingTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedVotingTXN.ProtoReflect.Descriptor instead.
func (*DelegatedVotingTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{1}
}

func (x *DelegatedVotingTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *DelegatedVotingTXN) GetDelegateVotes() []*DelegateVote {
	if x != nil {
		return x.DelegateVotes
	}
	return nil
}

func (x *DelegatedVotingTXN) GetDelegateFees() []*DelegateFees {
	if x != nil {
		return x.DelegateFees
	}
	return nil
}

type DelegateVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            []byte               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddRemoveContracts []*AddRemoveDelegate `protobuf:"bytes,2,rep,name=add_remove_contracts,json=addRemoveContracts,proto3" json:"add_remove_contracts,omitempty"`
}

func (x *DelegateVote) Reset() {
	*x = DelegateVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateVote) ProtoMessage() {}

func (x *DelegateVote) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateVote.ProtoReflect.Descriptor instead.
func (*DelegateVote) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{2}
}

func (x *DelegateVote) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DelegateVote) GetAddRemoveContracts() []*AddRemoveDelegate {
	if x != nil {
		return x.AddRemoveContracts
	}
	return nil
}

type DelegateFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AuthAmount string `protobuf:"bytes,2,opt,name=auth_amount,json=authAmount,proto3" json:"auth_amount,omitempty"`
}

func (x *DelegateFees) Reset() {
	*x = DelegateFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateFees) ProtoMessage() {}

func (x *DelegateFees) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateFees.ProtoReflect.Descriptor instead.
func (*DelegateFees) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{3}
}

func (x *DelegateFees) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *DelegateFees) GetAuthAmount() string {
	if x != nil {
		return x.AuthAmount
	}
	return ""
}

// trade in for maps
type ExpenseRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day     uint32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Month   uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Percent uint32 `protobuf:"varint,3,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *ExpenseRatio) Reset() {
	*x = ExpenseRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpenseRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseRatio) ProtoMessage() {}

func (x *ExpenseRatio) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseRatio.ProtoReflect.Descriptor instead.
func (*ExpenseRatio) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{4}
}

func (x *ExpenseRatio) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ExpenseRatio) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ExpenseRatio) GetPercent() uint32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{5}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ByteMultiplier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnType    TRANSACTION_TYPE `protobuf:"varint,1,opt,name=txn_type,json=txnType,proto3,enum=zera_validator.TRANSACTION_TYPE" json:"txn_type,omitempty"`
	Multiplier string           `protobuf:"bytes,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *ByteMultiplier) Reset() {
	*x = ByteMultiplier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteMultiplier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteMultiplier) ProtoMessage() {}

func (x *ByteMultiplier) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteMultiplier.ProtoReflect.Descriptor instead.
func (*ByteMultiplier) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{6}
}

func (x *ByteMultiplier) GetTxnType() TRANSACTION_TYPE {
	if x != nil {
		return x.TxnType
	}
	return TRANSACTION_TYPE_COIN_TYPE
}

func (x *ByteMultiplier) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

type FoundationTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base              *BaseTXN          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	RestrictedSymbols []string          `protobuf:"bytes,2,rep,name=restricted_symbols,json=restrictedSymbols,proto3" json:"restricted_symbols,omitempty"`
	ByteMultiplier    []*ByteMultiplier `protobuf:"bytes,3,rep,name=byte_multiplier,json=byteMultiplier,proto3" json:"byte_multiplier,omitempty"`
	Fee_ISO4217       *string           `protobuf:"bytes,4,opt,name=fee_ISO4217,json=feeISO4217,proto3,oneof" json:"fee_ISO4217,omitempty"`
}

func (x *FoundationTXN) Reset() {
	*x = FoundationTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoundationTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoundationTXN) ProtoMessage() {}

func (x *FoundationTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoundationTXN.ProtoReflect.Descriptor instead.
func (*FoundationTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{7}
}

func (x *FoundationTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FoundationTXN) GetRestrictedSymbols() []string {
	if x != nil {
		return x.RestrictedSymbols
	}
	return nil
}

func (x *FoundationTXN) GetByteMultiplier() []*ByteMultiplier {
	if x != nil {
		return x.ByteMultiplier
	}
	return nil
}

func (x *FoundationTXN) GetFee_ISO4217() string {
	if x != nil && x.Fee_ISO4217 != nil {
		return *x.Fee_ISO4217
	}
	return ""
}

type RevokeSBT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base             *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId       string   `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	RecipientAddress []byte   `protobuf:"bytes,3,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	SbtId            string   `protobuf:"bytes,4,opt,name=sbt_id,json=sbtId,proto3" json:"sbt_id,omitempty"`
}

func (x *RevokeSBT) Reset() {
	*x = RevokeSBT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeSBT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeSBT) ProtoMessage() {}

func (x *RevokeSBT) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeSBT.ProtoReflect.Descriptor instead.
func (*RevokeSBT) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{8}
}

func (x *RevokeSBT) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *RevokeSBT) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RevokeSBT) GetRecipientAddress() []byte {
	if x != nil {
		return x.RecipientAddress
	}
	return nil
}

func (x *RevokeSBT) GetSbtId() string {
	if x != nil {
		return x.SbtId
	}
	return ""
}

type FastQuorumTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ProposalId []byte   `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *FastQuorumTXN) Reset() {
	*x = FastQuorumTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastQuorumTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastQuorumTXN) ProtoMessage() {}

func (x *FastQuorumTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastQuorumTXN.ProtoReflect.Descriptor instead.
func (*FastQuorumTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{9}
}

func (x *FastQuorumTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FastQuorumTXN) GetProposalId() []byte {
	if x != nil {
		return x.ProposalId
	}
	return nil
}

type Governance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      GOVERNANCE_TYPE        `protobuf:"varint,1,opt,name=type,proto3,enum=zera_validator.GOVERNANCE_TYPE" json:"type,omitempty"`            //read GOVERNANCE_TYPE above
	RegularQuorum             uint32                 `protobuf:"varint,2,opt,name=regular_quorum,json=regularQuorum,proto3" json:"regular_quorum,omitempty"`         // percent of yes votes to pass at the end of cycle (still needs to pass threshhold)
	FastQuorum                *uint32                `protobuf:"varint,3,opt,name=fast_quorum,json=fastQuorum,proto3,oneof" json:"fast_quorum,omitempty"`            //Percent of yes votes to instantly pass (% based off circulating supply)
	VotingInstrument          []string               `protobuf:"bytes,4,rep,name=voting_instrument,json=votingInstrument,proto3" json:"voting_instrument,omitempty"` //which voting instruments are allowed to vote in this contract - this does effect fast_quorum and threshold
	Threshold                 uint32                 `protobuf:"varint,5,opt,name=threshold,proto3" json:"threshold,omitempty"`                                      // threshold of participation of holders needed to be accepted
	ChickenDinner             *bool                  `protobuf:"varint,6,opt,name=chicken_dinner,json=chickenDinner,proto3,oneof" json:"chicken_dinner,omitempty"`   //Option winner does not need to pass regular quorum.
	AllowMulti                bool                   `protobuf:"varint,7,opt,name=allow_multi,json=allowMulti,proto3" json:"allow_multi,omitempty"`                  //Allow multiple choice proposals.
	VotingPeriod              *uint32                `protobuf:"varint,8,opt,name=voting_period,json=votingPeriod,proto3,oneof" json:"voting_period,omitempty"`      //How many days in the voting period (Months | Days). (cannot be present with staged & adaptive) | (must be presnet with cycle & staggered)
	AllowedProposalInstrument []string               `protobuf:"bytes,9,rep,name=allowed_proposal_instrument,json=allowedProposalInstrument,proto3" json:"allowed_proposal_instrument,omitempty"`
	ProposalPeriod            *PROPOSAL_PERIOD       `protobuf:"varint,10,opt,name=proposal_period,json=proposalPeriod,proto3,enum=zera_validator.PROPOSAL_PERIOD,oneof" json:"proposal_period,omitempty"` //Is the total_period in months or days? months will start the cycle on the start_date, days will start after period ends
	StageLength               []uint32               `protobuf:"varint,11,rep,packed,name=stage_length,json=stageLength,proto3" json:"stage_length,omitempty"`                                             //Determines how many stages in cycle, cannot be more than 28 per month and 99 in total. '0' input will represent remainder of month (can only be used as last entry)
	StartTimestamp            *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`                                            //Start date of the contract, year-month-day-hour parsed. Needs to be present for staged and cycle
}

func (x *Governance) Reset() {
	*x = Governance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Governance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Governance) ProtoMessage() {}

func (x *Governance) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Governance.ProtoReflect.Descriptor instead.
func (*Governance) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{10}
}

func (x *Governance) GetType() GOVERNANCE_TYPE {
	if x != nil {
		return x.Type
	}
	return GOVERNANCE_TYPE_STAGED
}

func (x *Governance) GetRegularQuorum() uint32 {
	if x != nil {
		return x.RegularQuorum
	}
	return 0
}

func (x *Governance) GetFastQuorum() uint32 {
	if x != nil && x.FastQuorum != nil {
		return *x.FastQuorum
	}
	return 0
}

func (x *Governance) GetVotingInstrument() []string {
	if x != nil {
		return x.VotingInstrument
	}
	return nil
}

func (x *Governance) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Governance) GetChickenDinner() bool {
	if x != nil && x.ChickenDinner != nil {
		return *x.ChickenDinner
	}
	return false
}

func (x *Governance) GetAllowMulti() bool {
	if x != nil {
		return x.AllowMulti
	}
	return false
}

func (x *Governance) GetVotingPeriod() uint32 {
	if x != nil && x.VotingPeriod != nil {
		return *x.VotingPeriod
	}
	return 0
}

func (x *Governance) GetAllowedProposalInstrument() []string {
	if x != nil {
		return x.AllowedProposalInstrument
	}
	return nil
}

func (x *Governance) GetProposalPeriod() PROPOSAL_PERIOD {
	if x != nil && x.ProposalPeriod != nil {
		return *x.ProposalPeriod
	}
	return PROPOSAL_PERIOD_DAYS
}

func (x *Governance) GetStageLength() []uint32 {
	if x != nil {
		return x.StageLength
	}
	return nil
}

func (x *Governance) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

type CoinDenomination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DenominationName string `protobuf:"bytes,5,opt,name=denomination_name,json=denominationName,proto3" json:"denomination_name,omitempty"`
	Amount           string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CoinDenomination) Reset() {
	*x = CoinDenomination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinDenomination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinDenomination) ProtoMessage() {}

func (x *CoinDenomination) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinDenomination.ProtoReflect.Descriptor instead.
func (*CoinDenomination) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{11}
}

func (x *CoinDenomination) GetDenominationName() string {
	if x != nil {
		return x.DenominationName
	}
	return ""
}

func (x *CoinDenomination) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ContractFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee                  string            `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`                                                                                         //100% && $1.00 = 1000000000000000000 (quintillion)
	FeeAddress           []byte            `protobuf:"bytes,2,opt,name=fee_address,json=feeAddress,proto3,oneof" json:"fee_address,omitempty"`                                                   //address of contract holder (or the wallet they want fees to go to)
	Burn                 string            `protobuf:"bytes,3,opt,name=burn,proto3" json:"burn,omitempty"`                                                                                       //percent = 100% = 1000000000000000000 (quintillion)
	Validator            string            `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`                                                                             //percent = 100% = 1000000000000000000 (quintillion)
	AllowedFeeInstrument []string          `protobuf:"bytes,5,rep,name=allowed_fee_instrument,json=allowedFeeInstrument,proto3" json:"allowed_fee_instrument,omitempty"`                         //contract_ids that can be used to pay fees
	ContractFeeType      CONTRACT_FEE_TYPE `protobuf:"varint,6,opt,name=contract_fee_type,json=contractFeeType,proto3,enum=zera_validator.CONTRACT_FEE_TYPE" json:"contract_fee_type,omitempty"` //read CONTRACT_FEE_TYPE above
}

func (x *ContractFees) Reset() {
	*x = ContractFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractFees) ProtoMessage() {}

func (x *ContractFees) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractFees.ProtoReflect.Descriptor instead.
func (*ContractFees) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{12}
}

func (x *ContractFees) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *ContractFees) GetFeeAddress() []byte {
	if x != nil {
		return x.FeeAddress
	}
	return nil
}

func (x *ContractFees) GetBurn() string {
	if x != nil {
		return x.Burn
	}
	return ""
}

func (x *ContractFees) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *ContractFees) GetAllowedFeeInstrument() []string {
	if x != nil {
		return x.AllowedFeeInstrument
	}
	return nil
}

func (x *ContractFees) GetContractFeeType() CONTRACT_FEE_TYPE {
	if x != nil {
		return x.ContractFeeType
	}
	return CONTRACT_FEE_TYPE_FIXED
}

type ItemContractFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee                  string   `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"` //$1.00 = 1000000000000000000 (quintillion)
	FeeAddress           []byte   `protobuf:"bytes,2,opt,name=fee_address,json=feeAddress,proto3,oneof" json:"fee_address,omitempty"`
	Burn                 string   `protobuf:"bytes,3,opt,name=burn,proto3" json:"burn,omitempty"`
	Validator            string   `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
	AllowedFeeInstrument []string `protobuf:"bytes,5,rep,name=allowed_fee_instrument,json=allowedFeeInstrument,proto3" json:"allowed_fee_instrument,omitempty"`
}

func (x *ItemContractFees) Reset() {
	*x = ItemContractFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemContractFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemContractFees) ProtoMessage() {}

func (x *ItemContractFees) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemContractFees.ProtoReflect.Descriptor instead.
func (*ItemContractFees) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{13}
}

func (x *ItemContractFees) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *ItemContractFees) GetFeeAddress() []byte {
	if x != nil {
		return x.FeeAddress
	}
	return nil
}

func (x *ItemContractFees) GetBurn() string {
	if x != nil {
		return x.Burn
	}
	return ""
}

func (x *ItemContractFees) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *ItemContractFees) GetAllowedFeeInstrument() []string {
	if x != nil {
		return x.AllowedFeeInstrument
	}
	return nil
}

type RestrictedKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey      []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	TimeDelay      int64  `protobuf:"varint,2,opt,name=time_delay,json=timeDelay,proto3" json:"time_delay,omitempty"`
	Global         bool   `protobuf:"varint,3,opt,name=global,proto3" json:"global,omitempty"`
	UpdateContract bool   `protobuf:"varint,4,opt,name=update_contract,json=updateContract,proto3" json:"update_contract,omitempty"`
	Transfer       bool   `protobuf:"varint,5,opt,name=transfer,proto3" json:"transfer,omitempty"`
	Quash          bool   `protobuf:"varint,6,opt,name=quash,proto3" json:"quash,omitempty"`
	Mint           bool   `protobuf:"varint,7,opt,name=mint,proto3" json:"mint,omitempty"`
	Vote           bool   `protobuf:"varint,8,opt,name=vote,proto3" json:"vote,omitempty"`
	Propose        bool   `protobuf:"varint,9,opt,name=propose,proto3" json:"propose,omitempty"`
	Compliance     bool   `protobuf:"varint,10,opt,name=compliance,proto3" json:"compliance,omitempty"`
	ExpenseRatio   *bool  `protobuf:"varint,11,opt,name=expense_ratio,json=expenseRatio,proto3,oneof" json:"expense_ratio,omitempty"`
	CurEquiv       *bool  `protobuf:"varint,12,opt,name=cur_equiv,json=curEquiv,proto3,oneof" json:"cur_equiv,omitempty"`
	Revoke         *bool  `protobuf:"varint,13,opt,name=revoke,proto3,oneof" json:"revoke,omitempty"`
}

func (x *RestrictedKey) Reset() {
	*x = RestrictedKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestrictedKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestrictedKey) ProtoMessage() {}

func (x *RestrictedKey) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestrictedKey.ProtoReflect.Descriptor instead.
func (*RestrictedKey) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{14}
}

func (x *RestrictedKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RestrictedKey) GetTimeDelay() int64 {
	if x != nil {
		return x.TimeDelay
	}
	return 0
}

func (x *RestrictedKey) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

func (x *RestrictedKey) GetUpdateContract() bool {
	if x != nil {
		return x.UpdateContract
	}
	return false
}

func (x *RestrictedKey) GetTransfer() bool {
	if x != nil {
		return x.Transfer
	}
	return false
}

func (x *RestrictedKey) GetQuash() bool {
	if x != nil {
		return x.Quash
	}
	return false
}

func (x *RestrictedKey) GetMint() bool {
	if x != nil {
		return x.Mint
	}
	return false
}

func (x *RestrictedKey) GetVote() bool {
	if x != nil {
		return x.Vote
	}
	return false
}

func (x *RestrictedKey) GetPropose() bool {
	if x != nil {
		return x.Propose
	}
	return false
}

func (x *RestrictedKey) GetCompliance() bool {
	if x != nil {
		return x.Compliance
	}
	return false
}

func (x *RestrictedKey) GetExpenseRatio() bool {
	if x != nil && x.ExpenseRatio != nil {
		return *x.ExpenseRatio
	}
	return false
}

func (x *RestrictedKey) GetCurEquiv() bool {
	if x != nil && x.CurEquiv != nil {
		return *x.CurEquiv
	}
	return false
}

func (x *RestrictedKey) GetRevoke() bool {
	if x != nil && x.Revoke != nil {
		return *x.Revoke
	}
	return false
}

type ExpenseRatioTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId string   `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Addresses  [][]byte `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ExpenseRatioTXN) Reset() {
	*x = ExpenseRatioTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpenseRatioTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseRatioTXN) ProtoMessage() {}

func (x *ExpenseRatioTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseRatioTXN.ProtoReflect.Descriptor instead.
func (*ExpenseRatioTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{15}
}

func (x *ExpenseRatioTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ExpenseRatioTXN) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ExpenseRatioTXN) GetAddresses() [][]byte {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type PreMintWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,16,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,17,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PreMintWallet) Reset() {
	*x = PreMintWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreMintWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreMintWallet) ProtoMessage() {}

func (x *PreMintWallet) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreMintWallet.ProtoReflect.Descriptor instead.
func (*PreMintWallet) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{16}
}

func (x *PreMintWallet) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *PreMintWallet) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientAddress  []byte  `protobuf:"bytes,27,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	Amount            string  `protobuf:"bytes,28,opt,name=amount,proto3" json:"amount,omitempty"`
	ContractId        string  `protobuf:"bytes,29,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ContractFeeAmount *string `protobuf:"bytes,30,opt,name=contract_fee_amount,json=contractFeeAmount,proto3,oneof" json:"contract_fee_amount,omitempty"`
	ContractFeeId     *string `protobuf:"bytes,31,opt,name=contract_fee_id,json=contractFeeId,proto3,oneof" json:"contract_fee_id,omitempty"`
	BaseFeeAmount     string  `protobuf:"bytes,32,opt,name=base_fee_amount,json=baseFeeAmount,proto3" json:"base_fee_amount,omitempty"`
	BaseFeeId         string  `protobuf:"bytes,33,opt,name=base_fee_id,json=baseFeeId,proto3" json:"base_fee_id,omitempty"`
	Memo              *string `protobuf:"bytes,35,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{17}
}

func (x *Transfer) GetRecipientAddress() []byte {
	if x != nil {
		return x.RecipientAddress
	}
	return nil
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *Transfer) GetContractFeeAmount() string {
	if x != nil && x.ContractFeeAmount != nil {
		return *x.ContractFeeAmount
	}
	return ""
}

func (x *Transfer) GetContractFeeId() string {
	if x != nil && x.ContractFeeId != nil {
		return *x.ContractFeeId
	}
	return ""
}

func (x *Transfer) GetBaseFeeAmount() string {
	if x != nil {
		return x.BaseFeeAmount
	}
	return ""
}

func (x *Transfer) GetBaseFeeId() string {
	if x != nil {
		return x.BaseFeeId
	}
	return ""
}

func (x *Transfer) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

type BaseTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey      []byte                 `protobuf:"bytes,19,opt,name=public_key,json=publicKey,proto3,oneof" json:"public_key,omitempty"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FeeAmount      string                 `protobuf:"bytes,21,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
	FeeId          string                 `protobuf:"bytes,22,opt,name=fee_id,json=feeId,proto3" json:"fee_id,omitempty"`
	Signature      []byte                 `protobuf:"bytes,23,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
	Hash           []byte                 `protobuf:"bytes,24,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
	MultiPublicKey [][]byte               `protobuf:"bytes,25,rep,name=multi_public_key,json=multiPublicKey,proto3" json:"multi_public_key,omitempty"`
	MultiSignature [][]byte               `protobuf:"bytes,26,rep,name=multi_signature,json=multiSignature,proto3" json:"multi_signature,omitempty"`
	Memo           *string                `protobuf:"bytes,27,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
}

func (x *BaseTXN) Reset() {
	*x = BaseTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTXN) ProtoMessage() {}

func (x *BaseTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTXN.ProtoReflect.Descriptor instead.
func (*BaseTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{18}
}

func (x *BaseTXN) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *BaseTXN) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BaseTXN) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *BaseTXN) GetFeeId() string {
	if x != nil {
		return x.FeeId
	}
	return ""
}

func (x *BaseTXN) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *BaseTXN) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BaseTXN) GetMultiPublicKey() [][]byte {
	if x != nil {
		return x.MultiPublicKey
	}
	return nil
}

func (x *BaseTXN) GetMultiSignature() [][]byte {
	if x != nil {
		return x.MultiSignature
	}
	return nil
}

func (x *BaseTXN) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

type SelfCurrencyEquiv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseTXN         `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CurEquiv []*CurrencyEquiv `protobuf:"bytes,2,rep,name=cur_equiv,json=curEquiv,proto3" json:"cur_equiv,omitempty"`
}

func (x *SelfCurrencyEquiv) Reset() {
	*x = SelfCurrencyEquiv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfCurrencyEquiv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfCurrencyEquiv) ProtoMessage() {}

func (x *SelfCurrencyEquiv) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfCurrencyEquiv.ProtoReflect.Descriptor instead.
func (*SelfCurrencyEquiv) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{19}
}

func (x *SelfCurrencyEquiv) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SelfCurrencyEquiv) GetCurEquiv() []*CurrencyEquiv {
	if x != nil {
		return x.CurEquiv
	}
	return nil
}

type AuthorizedCurrencyEquiv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseTXN         `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CurEquiv []*CurrencyEquiv `protobuf:"bytes,2,rep,name=cur_equiv,json=curEquiv,proto3" json:"cur_equiv,omitempty"`
}

func (x *AuthorizedCurrencyEquiv) Reset() {
	*x = AuthorizedCurrencyEquiv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedCurrencyEquiv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedCurrencyEquiv) ProtoMessage() {}

func (x *AuthorizedCurrencyEquiv) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedCurrencyEquiv.ProtoReflect.Descriptor instead.
func (*AuthorizedCurrencyEquiv) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{20}
}

func (x *AuthorizedCurrencyEquiv) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *AuthorizedCurrencyEquiv) GetCurEquiv() []*CurrencyEquiv {
	if x != nil {
		return x.CurEquiv
	}
	return nil
}

type CurrencyEquiv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string  `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Rate       string  `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Authorized *bool   `protobuf:"varint,3,opt,name=authorized,proto3,oneof" json:"authorized,omitempty"`
	MaxStake   *uint64 `protobuf:"varint,4,opt,name=max_stake,json=maxStake,proto3,oneof" json:"max_stake,omitempty"`
}

func (x *CurrencyEquiv) Reset() {
	*x = CurrencyEquiv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyEquiv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyEquiv) ProtoMessage() {}

func (x *CurrencyEquiv) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyEquiv.ProtoReflect.Descriptor instead.
func (*CurrencyEquiv) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{21}
}

func (x *CurrencyEquiv) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *CurrencyEquiv) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *CurrencyEquiv) GetAuthorized() bool {
	if x != nil && x.Authorized != nil {
		return *x.Authorized
	}
	return false
}

func (x *CurrencyEquiv) GetMaxStake() uint64 {
	if x != nil && x.MaxStake != nil {
		return *x.MaxStake
	}
	return 0
}

type ExpenseRatioResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId       string     `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Wallets          []*Wallets `protobuf:"bytes,2,rep,name=wallets,proto3" json:"wallets,omitempty"`
	Hash             []byte     `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	RecipientAddress []byte     `protobuf:"bytes,4,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
}

func (x *ExpenseRatioResult) Reset() {
	*x = ExpenseRatioResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpenseRatioResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseRatioResult) ProtoMessage() {}

func (x *ExpenseRatioResult) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseRatioResult.ProtoReflect.Descriptor instead.
func (*ExpenseRatioResult) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{22}
}

func (x *ExpenseRatioResult) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ExpenseRatioResult) GetWallets() []*Wallets {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *ExpenseRatioResult) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ExpenseRatioResult) GetRecipientAddress() []byte {
	if x != nil {
		return x.RecipientAddress
	}
	return nil
}

type Wallets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Wallets) Reset() {
	*x = Wallets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallets) ProtoMessage() {}

func (x *Wallets) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallets.ProtoReflect.Descriptor instead.
func (*Wallets) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{23}
}

func (x *Wallets) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Wallets) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type QuashTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId string   `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	TxnHash    []byte   `protobuf:"bytes,3,opt,name=txn_hash,json=txnHash,proto3" json:"txn_hash,omitempty"`
}

func (x *QuashTXN) Reset() {
	*x = QuashTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuashTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuashTXN) ProtoMessage() {}

func (x *QuashTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuashTXN.ProtoReflect.Descriptor instead.
func (*QuashTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{24}
}

func (x *QuashTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QuashTXN) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *QuashTXN) GetTxnHash() []byte {
	if x != nil {
		return x.TxnHash
	}
	return nil
}

type QuashResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnHash   []byte   `protobuf:"bytes,1,opt,name=txn_hash,json=txnHash,proto3" json:"txn_hash,omitempty"`
	QuashKeys [][]byte `protobuf:"bytes,2,rep,name=quash_keys,json=quashKeys,proto3" json:"quash_keys,omitempty"`
}

func (x *QuashResult) Reset() {
	*x = QuashResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuashResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuashResult) ProtoMessage() {}

func (x *QuashResult) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuashResult.ProtoReflect.Descriptor instead.
func (*QuashResult) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{25}
}

func (x *QuashResult) GetTxnHash() []byte {
	if x != nil {
		return x.TxnHash
	}
	return nil
}

func (x *QuashResult) GetQuashKeys() [][]byte {
	if x != nil {
		return x.QuashKeys
	}
	return nil
}

// MAIN TXN MESSAGES
type CoinTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseTXN    `protobuf:"bytes,34,opt,name=base,proto3" json:"base,omitempty"`
	Transfers []*Transfer `protobuf:"bytes,35,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *CoinTXN) Reset() {
	*x = CoinTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinTXN) ProtoMessage() {}

func (x *CoinTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinTXN.ProtoReflect.Descriptor instead.
func (*CoinTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{26}
}

func (x *CoinTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CoinTXN) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type MintTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base             *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId       string   `protobuf:"bytes,39,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Amount           string   `protobuf:"bytes,40,opt,name=amount,proto3" json:"amount,omitempty"`
	RecipientAddress []byte   `protobuf:"bytes,41,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
}

func (x *MintTXN) Reset() {
	*x = MintTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintTXN) ProtoMessage() {}

func (x *MintTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintTXN.ProtoReflect.Descriptor instead.
func (*MintTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{27}
}

func (x *MintTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MintTXN) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *MintTXN) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MintTXN) GetRecipientAddress() []byte {
	if x != nil {
		return x.RecipientAddress
	}
	return nil
}

type NFTTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base              *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId        string   `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ItemId            string   `protobuf:"bytes,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	RecipientAddress  []byte   `protobuf:"bytes,4,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	ContractFeeAmount *string  `protobuf:"bytes,5,opt,name=contract_fee_amount,json=contractFeeAmount,proto3,oneof" json:"contract_fee_amount,omitempty"`
	ContractFeeId     *string  `protobuf:"bytes,6,opt,name=contract_fee_id,json=contractFeeId,proto3,oneof" json:"contract_fee_id,omitempty"`
}

func (x *NFTTXN) Reset() {
	*x = NFTTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTXN) ProtoMessage() {}

func (x *NFTTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTXN.ProtoReflect.Descriptor instead.
func (*NFTTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{28}
}

func (x *NFTTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *NFTTXN) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *NFTTXN) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *NFTTXN) GetRecipientAddress() []byte {
	if x != nil {
		return x.RecipientAddress
	}
	return nil
}

func (x *NFTTXN) GetContractFeeAmount() string {
	if x != nil && x.ContractFeeAmount != nil {
		return *x.ContractFeeAmount
	}
	return ""
}

func (x *NFTTXN) GetContractFeeId() string {
	if x != nil && x.ContractFeeId != nil {
		return *x.ContractFeeId
	}
	return ""
}

type ItemizedMintTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base             *BaseTXN          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId       string            `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ItemId           string            `protobuf:"bytes,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	RecipientAddress []byte            `protobuf:"bytes,4,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	VotingWeight     *string           `protobuf:"bytes,5,opt,name=voting_weight,json=votingWeight,proto3,oneof" json:"voting_weight,omitempty"`
	Parameters       []*KeyValuePair   `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Expiry           *uint64           `protobuf:"varint,7,opt,name=expiry,proto3,oneof" json:"expiry,omitempty"`
	ContractFees     *ItemContractFees `protobuf:"bytes,8,opt,name=contract_fees,json=contractFees,proto3,oneof" json:"contract_fees,omitempty"` //contract fees for specific item
	ValidFrom        *uint64           `protobuf:"varint,9,opt,name=valid_from,json=validFrom,proto3,oneof" json:"valid_from,omitempty"`
}

func (x *ItemizedMintTXN) Reset() {
	*x = ItemizedMintTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemizedMintTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemizedMintTXN) ProtoMessage() {}

func (x *ItemizedMintTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemizedMintTXN.ProtoReflect.Descriptor instead.
func (*ItemizedMintTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{29}
}

func (x *ItemizedMintTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ItemizedMintTXN) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ItemizedMintTXN) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ItemizedMintTXN) GetRecipientAddress() []byte {
	if x != nil {
		return x.RecipientAddress
	}
	return nil
}

func (x *ItemizedMintTXN) GetVotingWeight() string {
	if x != nil && x.VotingWeight != nil {
		return *x.VotingWeight
	}
	return ""
}

func (x *ItemizedMintTXN) GetParameters() []*KeyValuePair {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ItemizedMintTXN) GetExpiry() uint64 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *ItemizedMintTXN) GetContractFees() *ItemContractFees {
	if x != nil {
		return x.ContractFees
	}
	return nil
}

func (x *ItemizedMintTXN) GetValidFrom() uint64 {
	if x != nil && x.ValidFrom != nil {
		return *x.ValidFrom
	}
	return 0
}

type ContractUpdateTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base             *BaseTXN         `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId       string           `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ContractVersion  uint64           `protobuf:"varint,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	Name             *string          `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Governance       *Governance      `protobuf:"bytes,5,opt,name=governance,proto3,oneof" json:"governance,omitempty"`
	RestrictedKeys   []*RestrictedKey `protobuf:"bytes,6,rep,name=restricted_keys,json=restrictedKeys,proto3" json:"restricted_keys,omitempty"`
	ContractFees     *ContractFees    `protobuf:"bytes,7,opt,name=contract_fees,json=contractFees,proto3,oneof" json:"contract_fees,omitempty"`
	CustomParameters []*KeyValuePair  `protobuf:"bytes,8,rep,name=custom_parameters,json=customParameters,proto3" json:"custom_parameters,omitempty"`
	ExpenseRatio     []*ExpenseRatio  `protobuf:"bytes,9,rep,name=expense_ratio,json=expenseRatio,proto3" json:"expense_ratio,omitempty"`
}

func (x *ContractUpdateTXN) Reset() {
	*x = ContractUpdateTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractUpdateTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractUpdateTXN) ProtoMessage() {}

func (x *ContractUpdateTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractUpdateTXN.ProtoReflect.Descriptor instead.
func (*ContractUpdateTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{30}
}

func (x *ContractUpdateTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ContractUpdateTXN) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ContractUpdateTXN) GetContractVersion() uint64 {
	if x != nil {
		return x.ContractVersion
	}
	return 0
}

func (x *ContractUpdateTXN) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContractUpdateTXN) GetGovernance() *Governance {
	if x != nil {
		return x.Governance
	}
	return nil
}

func (x *ContractUpdateTXN) GetRestrictedKeys() []*RestrictedKey {
	if x != nil {
		return x.RestrictedKeys
	}
	return nil
}

func (x *ContractUpdateTXN) GetContractFees() *ContractFees {
	if x != nil {
		return x.ContractFees
	}
	return nil
}

func (x *ContractUpdateTXN) GetCustomParameters() []*KeyValuePair {
	if x != nil {
		return x.CustomParameters
	}
	return nil
}

func (x *ContractUpdateTXN) GetExpenseRatio() []*ExpenseRatio {
	if x != nil {
		return x.ExpenseRatio
	}
	return nil
}

type InstrumentContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base               *BaseTXN          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractVersion    uint64            `protobuf:"varint,2,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	Symbol             string            `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name               string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Governance         *Governance       `protobuf:"bytes,5,opt,name=governance,proto3,oneof" json:"governance,omitempty"`
	RestrictedKeys     []*RestrictedKey  `protobuf:"bytes,6,rep,name=restricted_keys,json=restrictedKeys,proto3" json:"restricted_keys,omitempty"`
	MaxSupply          *string           `protobuf:"bytes,7,opt,name=max_supply,json=maxSupply,proto3,oneof" json:"max_supply,omitempty"`
	ContractFees       *ContractFees     `protobuf:"bytes,8,opt,name=contract_fees,json=contractFees,proto3,oneof" json:"contract_fees,omitempty"`
	PremintWallets     []*PreMintWallet  `protobuf:"bytes,9,rep,name=premint_wallets,json=premintWallets,proto3" json:"premint_wallets,omitempty"`
	CoinDenomination   *CoinDenomination `protobuf:"bytes,10,opt,name=coin_denomination,json=coinDenomination,proto3,oneof" json:"coin_denomination,omitempty"`
	CustomParameters   []*KeyValuePair   `protobuf:"bytes,11,rep,name=custom_parameters,json=customParameters,proto3" json:"custom_parameters,omitempty"`
	ContractId         string            `protobuf:"bytes,12,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ExpenseRatio       []*ExpenseRatio   `protobuf:"bytes,13,rep,name=expense_ratio,json=expenseRatio,proto3" json:"expense_ratio,omitempty"`
	Type               CONTRACT_TYPE     `protobuf:"varint,14,opt,name=type,proto3,enum=zera_validator.CONTRACT_TYPE" json:"type,omitempty"`
	UpdateContractFees bool              `protobuf:"varint,15,opt,name=update_contract_fees,json=updateContractFees,proto3" json:"update_contract_fees,omitempty"`
	UpdateExpenseRatio bool              `protobuf:"varint,16,opt,name=update_expense_ratio,json=updateExpenseRatio,proto3" json:"update_expense_ratio,omitempty"`
	QuashThreshold     *uint32           `protobuf:"varint,17,opt,name=quash_threshold,json=quashThreshold,proto3,oneof" json:"quash_threshold,omitempty"` //total number of quash txns to quash a time delay txn
}

func (x *InstrumentContract) Reset() {
	*x = InstrumentContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentContract) ProtoMessage() {}

func (x *InstrumentContract) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentContract.ProtoReflect.Descriptor instead.
func (*InstrumentContract) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{31}
}

func (x *InstrumentContract) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *InstrumentContract) GetContractVersion() uint64 {
	if x != nil {
		return x.ContractVersion
	}
	return 0
}

func (x *InstrumentContract) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *InstrumentContract) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstrumentContract) GetGovernance() *Governance {
	if x != nil {
		return x.Governance
	}
	return nil
}

func (x *InstrumentContract) GetRestrictedKeys() []*RestrictedKey {
	if x != nil {
		return x.RestrictedKeys
	}
	return nil
}

func (x *InstrumentContract) GetMaxSupply() string {
	if x != nil && x.MaxSupply != nil {
		return *x.MaxSupply
	}
	return ""
}

func (x *InstrumentContract) GetContractFees() *ContractFees {
	if x != nil {
		return x.ContractFees
	}
	return nil
}

func (x *InstrumentContract) GetPremintWallets() []*PreMintWallet {
	if x != nil {
		return x.PremintWallets
	}
	return nil
}

func (x *InstrumentContract) GetCoinDenomination() *CoinDenomination {
	if x != nil {
		return x.CoinDenomination
	}
	return nil
}

func (x *InstrumentContract) GetCustomParameters() []*KeyValuePair {
	if x != nil {
		return x.CustomParameters
	}
	return nil
}

func (x *InstrumentContract) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *InstrumentContract) GetExpenseRatio() []*ExpenseRatio {
	if x != nil {
		return x.ExpenseRatio
	}
	return nil
}

func (x *InstrumentContract) GetType() CONTRACT_TYPE {
	if x != nil {
		return x.Type
	}
	return CONTRACT_TYPE_TOKEN
}

func (x *InstrumentContract) GetUpdateContractFees() bool {
	if x != nil {
		return x.UpdateContractFees
	}
	return false
}

func (x *InstrumentContract) GetUpdateExpenseRatio() bool {
	if x != nil {
		return x.UpdateExpenseRatio
	}
	return false
}

func (x *InstrumentContract) GetQuashThreshold() uint32 {
	if x != nil && x.QuashThreshold != nil {
		return *x.QuashThreshold
	}
	return 0
}

type GovernanceVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base          *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId    string   `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ProposalId    string   `protobuf:"bytes,3,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Support       *bool    `protobuf:"varint,4,opt,name=support,proto3,oneof" json:"support,omitempty"`
	SupportOption *uint32  `protobuf:"varint,5,opt,name=support_option,json=supportOption,proto3,oneof" json:"support_option,omitempty"`
}

func (x *GovernanceVote) Reset() {
	*x = GovernanceVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceVote) ProtoMessage() {}

func (x *GovernanceVote) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceVote.ProtoReflect.Descriptor instead.
func (*GovernanceVote) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{32}
}

func (x *GovernanceVote) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GovernanceVote) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *GovernanceVote) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *GovernanceVote) GetSupport() bool {
	if x != nil && x.Support != nil {
		return *x.Support
	}
	return false
}

func (x *GovernanceVote) GetSupportOption() uint32 {
	if x != nil && x.SupportOption != nil {
		return *x.SupportOption
	}
	return 0
}

type GovernanceProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *BaseTXN               `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId     string                 `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Title          string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Synopsis       string                 `protobuf:"bytes,4,opt,name=synopsis,proto3" json:"synopsis,omitempty"`
	Body           string                 `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Options        []string               `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_timestamp,json=startTimestamp,proto3,oneof" json:"start_timestamp,omitempty"`
	EndTimestamp   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_timestamp,json=endTimestamp,proto3,oneof" json:"end_timestamp,omitempty"`
}

func (x *GovernanceProposal) Reset() {
	*x = GovernanceProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceProposal) ProtoMessage() {}

func (x *GovernanceProposal) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceProposal.ProtoReflect.Descriptor instead.
func (*GovernanceProposal) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{33}
}

func (x *GovernanceProposal) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GovernanceProposal) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *GovernanceProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GovernanceProposal) GetSynopsis() string {
	if x != nil {
		return x.Synopsis
	}
	return ""
}

func (x *GovernanceProposal) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *GovernanceProposal) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *GovernanceProposal) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *GovernanceProposal) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

type SmartContractTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *BaseTXN                  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	RawCode      string                    `protobuf:"bytes,2,opt,name=raw_code,json=rawCode,proto3" json:"raw_code,omitempty"`
	Language     LANGUAGE                  `protobuf:"varint,3,opt,name=language,proto3,enum=zera_validator.LANGUAGE" json:"language,omitempty"`
	VariableType []*SmartContractParameter `protobuf:"bytes,4,rep,name=variable_type,json=variableType,proto3" json:"variable_type,omitempty"`
}

func (x *SmartContractTXN) Reset() {
	*x = SmartContractTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractTXN) ProtoMessage() {}

func (x *SmartContractTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractTXN.ProtoReflect.Descriptor instead.
func (*SmartContractTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{34}
}

func (x *SmartContractTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmartContractTXN) GetRawCode() string {
	if x != nil {
		return x.RawCode
	}
	return ""
}

func (x *SmartContractTXN) GetLanguage() LANGUAGE {
	if x != nil {
		return x.Language
	}
	return LANGUAGE_CPLUSPLUS
}

func (x *SmartContractTXN) GetVariableType() []*SmartContractParameter {
	if x != nil {
		return x.VariableType
	}
	return nil
}

type SmartContractExecuteTXN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base            *BaseTXN                  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SmartContractId []byte                    `protobuf:"bytes,2,opt,name=smart_contract_id,json=smartContractId,proto3" json:"smart_contract_id,omitempty"`
	Parameters      []*SmartContractParameter `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *SmartContractExecuteTXN) Reset() {
	*x = SmartContractExecuteTXN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractExecuteTXN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractExecuteTXN) ProtoMessage() {}

func (x *SmartContractExecuteTXN) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractExecuteTXN.ProtoReflect.Descriptor instead.
func (*SmartContractExecuteTXN) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{35}
}

func (x *SmartContractExecuteTXN) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SmartContractExecuteTXN) GetSmartContractId() []byte {
	if x != nil {
		return x.SmartContractId
	}
	return nil
}

func (x *SmartContractExecuteTXN) GetParameters() []*SmartContractParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey     []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Host          string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	ClientPort    string                 `protobuf:"bytes,3,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`
	ValidatorPort string                 `protobuf:"bytes,4,opt,name=validator_port,json=validatorPort,proto3" json:"validator_port,omitempty"`
	Benchmark     uint64                 `protobuf:"varint,5,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Lite          bool                   `protobuf:"varint,7,opt,name=lite,proto3" json:"lite,omitempty"`
	Online        bool                   `protobuf:"varint,8,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{36}
}

func (x *Validator) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Validator) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Validator) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

func (x *Validator) GetValidatorPort() string {
	if x != nil {
		return x.ValidatorPort
	}
	return ""
}

func (x *Validator) GetBenchmark() uint64 {
	if x != nil {
		return x.Benchmark
	}
	return 0
}

func (x *Validator) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Validator) GetLite() bool {
	if x != nil {
		return x.Lite
	}
	return false
}

func (x *Validator) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type ValidatorRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseTXN   `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Validator *Validator `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Register  bool       `protobuf:"varint,3,opt,name=register,proto3" json:"register,omitempty"`
}

func (x *ValidatorRegistration) Reset() {
	*x = ValidatorRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorRegistration) ProtoMessage() {}

func (x *ValidatorRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorRegistration.ProtoReflect.Descriptor instead.
func (*ValidatorRegistration) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{37}
}

func (x *ValidatorRegistration) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ValidatorRegistration) GetValidator() *Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *ValidatorRegistration) GetRegister() bool {
	if x != nil {
		return x.Register
	}
	return false
}

type ValidatorHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Online bool     `protobuf:"varint,2,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *ValidatorHeartbeat) Reset() {
	*x = ValidatorHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorHeartbeat) ProtoMessage() {}

func (x *ValidatorHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorHeartbeat.ProtoReflect.Descriptor instead.
func (*ValidatorHeartbeat) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{38}
}

func (x *ValidatorHeartbeat) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ValidatorHeartbeat) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type SmartContractParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32        `protobuf:"varint,75,opt,name=index,proto3" json:"index,omitempty"`
	Type  VARIABLE_TYPE `protobuf:"varint,76,opt,name=type,proto3,enum=zera_validator.VARIABLE_TYPE" json:"type,omitempty"`
	Value *string       `protobuf:"bytes,77,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *SmartContractParameter) Reset() {
	*x = SmartContractParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractParameter) ProtoMessage() {}

func (x *SmartContractParameter) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractParameter.ProtoReflect.Descriptor instead.
func (*SmartContractParameter) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{39}
}

func (x *SmartContractParameter) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SmartContractParameter) GetType() VARIABLE_TYPE {
	if x != nil {
		return x.Type
	}
	return VARIABLE_TYPE_INT
}

func (x *SmartContractParameter) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Votes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes []*VotePair `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *Votes) Reset() {
	*x = Votes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Votes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Votes) ProtoMessage() {}

func (x *Votes) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Votes.ProtoReflect.Descriptor instead.
func (*Votes) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{40}
}

func (x *Votes) GetVotes() []*VotePair {
	if x != nil {
		return x.Votes
	}
	return nil
}

type VotePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Amount     string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *VotePair) Reset() {
	*x = VotePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotePair) ProtoMessage() {}

func (x *VotePair) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotePair.ProtoReflect.Descriptor instead.
func (*VotePair) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{41}
}

func (x *VotePair) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *VotePair) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ProposalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base            *BaseTXN `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ContractId      string   `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`                        //contract_id of the proposal
	ProposalId      []byte   `protobuf:"bytes,3,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`                        //proposal_id of the proposal
	SupportCurEquiv *string  `protobuf:"bytes,4,opt,name=support_cur_equiv,json=supportCurEquiv,proto3,oneof" json:"support_cur_equiv,omitempty"` //cur_equiv of all the support votes (multiple contract_ids)
	AgainstCurEquiv *string  `protobuf:"bytes,5,opt,name=against_cur_equiv,json=againstCurEquiv,proto3,oneof" json:"against_cur_equiv,omitempty"` //cur_equiv of all the against votes (multiple contract_ids)
	OptionCurEquiv  []string `protobuf:"bytes,6,rep,name=option_cur_equiv,json=optionCurEquiv,proto3" json:"option_cur_equiv,omitempty"`          //cur_equiv of all the option votes (multiple contract_ids)
	SupportVotes    *Votes   `protobuf:"bytes,7,opt,name=support_votes,json=supportVotes,proto3,oneof" json:"support_votes,omitempty"`            //raw support votes of each contract_id
	AgainstVotes    *Votes   `protobuf:"bytes,8,opt,name=against_votes,json=againstVotes,proto3,oneof" json:"against_votes,omitempty"`            //raw against votes of each contract_id
	OptionVotes     []*Votes `protobuf:"bytes,9,rep,name=option_votes,json=optionVotes,proto3" json:"option_votes,omitempty"`                     //raw option votes of each contract_id
	Passed          bool     `protobuf:"varint,10,opt,name=passed,proto3" json:"passed,omitempty"`
	FinalStage      bool     `protobuf:"varint,11,opt,name=final_stage,json=finalStage,proto3" json:"final_stage,omitempty"`
	Stage           uint32   `protobuf:"varint,12,opt,name=stage,proto3" json:"stage,omitempty"`
	FeeAddress      string   `protobuf:"bytes,13,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty"`
}

func (x *ProposalResult) Reset() {
	*x = ProposalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalResult) ProtoMessage() {}

func (x *ProposalResult) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalResult.ProtoReflect.Descriptor instead.
func (*ProposalResult) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{42}
}

func (x *ProposalResult) GetBase() *BaseTXN {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ProposalResult) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ProposalResult) GetProposalId() []byte {
	if x != nil {
		return x.ProposalId
	}
	return nil
}

func (x *ProposalResult) GetSupportCurEquiv() string {
	if x != nil && x.SupportCurEquiv != nil {
		return *x.SupportCurEquiv
	}
	return ""
}

func (x *ProposalResult) GetAgainstCurEquiv() string {
	if x != nil && x.AgainstCurEquiv != nil {
		return *x.AgainstCurEquiv
	}
	return ""
}

func (x *ProposalResult) GetOptionCurEquiv() []string {
	if x != nil {
		return x.OptionCurEquiv
	}
	return nil
}

func (x *ProposalResult) GetSupportVotes() *Votes {
	if x != nil {
		return x.SupportVotes
	}
	return nil
}

func (x *ProposalResult) GetAgainstVotes() *Votes {
	if x != nil {
		return x.AgainstVotes
	}
	return nil
}

func (x *ProposalResult) GetOptionVotes() []*Votes {
	if x != nil {
		return x.OptionVotes
	}
	return nil
}

func (x *ProposalResult) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *ProposalResult) GetFinalStage() bool {
	if x != nil {
		return x.FinalStage
	}
	return false
}

func (x *ProposalResult) GetStage() uint32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *ProposalResult) GetFeeAddress() string {
	if x != nil {
		return x.FeeAddress
	}
	return ""
}

type TXNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTxns                  []*CoinTXN                 `protobuf:"bytes,1,rep,name=coin_txns,json=coinTxns,proto3" json:"coin_txns,omitempty"`
	MintTxns                  []*MintTXN                 `protobuf:"bytes,2,rep,name=mint_txns,json=mintTxns,proto3" json:"mint_txns,omitempty"`
	ItemMintTxns              []*ItemizedMintTXN         `protobuf:"bytes,3,rep,name=item_mint_txns,json=itemMintTxns,proto3" json:"item_mint_txns,omitempty"`
	ContractTxns              []*InstrumentContract      `protobuf:"bytes,4,rep,name=contract_txns,json=contractTxns,proto3" json:"contract_txns,omitempty"`
	GovernanceVotes           []*GovernanceVote          `protobuf:"bytes,5,rep,name=governance_votes,json=governanceVotes,proto3" json:"governance_votes,omitempty"`
	GovernanceProposals       []*GovernanceProposal      `protobuf:"bytes,6,rep,name=governance_proposals,json=governanceProposals,proto3" json:"governance_proposals,omitempty"`
	SmartContracts            []*SmartContractTXN        `protobuf:"bytes,7,rep,name=smart_contracts,json=smartContracts,proto3" json:"smart_contracts,omitempty"`
	SmartContractExecutes     []*SmartContractExecuteTXN `protobuf:"bytes,8,rep,name=smart_contract_executes,json=smartContractExecutes,proto3" json:"smart_contract_executes,omitempty"`
	SelfCurEquivs             []*SelfCurrencyEquiv       `protobuf:"bytes,9,rep,name=self_cur_equivs,json=selfCurEquivs,proto3" json:"self_cur_equivs,omitempty"`
	AuthCurEquivs             []*AuthorizedCurrencyEquiv `protobuf:"bytes,10,rep,name=auth_cur_equivs,json=authCurEquivs,proto3" json:"auth_cur_equivs,omitempty"`
	ExpenseRatios             []*ExpenseRatioTXN         `protobuf:"bytes,11,rep,name=expense_ratios,json=expenseRatios,proto3" json:"expense_ratios,omitempty"`
	TxnFeesAndStatus          []*TXNStatusFees           `protobuf:"bytes,12,rep,name=txn_fees_and_status,json=txnFeesAndStatus,proto3" json:"txn_fees_and_status,omitempty"`
	TokenFees                 []*TokenFees               `protobuf:"bytes,13,rep,name=token_fees,json=tokenFees,proto3" json:"token_fees,omitempty"`
	NftTxns                   []*NFTTXN                  `protobuf:"bytes,14,rep,name=nft_txns,json=nftTxns,proto3" json:"nft_txns,omitempty"`
	ContractUpdateTxns        []*ContractUpdateTXN       `protobuf:"bytes,15,rep,name=contract_update_txns,json=contractUpdateTxns,proto3" json:"contract_update_txns,omitempty"`
	ValidatorRegistrationTxns []*ValidatorRegistration   `protobuf:"bytes,16,rep,name=validator_registration_txns,json=validatorRegistrationTxns,proto3" json:"validator_registration_txns,omitempty"`
	ValidatorHeartbeatTxns    []*ValidatorHeartbeat      `protobuf:"bytes,17,rep,name=validator_heartbeat_txns,json=validatorHeartbeatTxns,proto3" json:"validator_heartbeat_txns,omitempty"`
	ProposalResultTxns        []*ProposalResult          `protobuf:"bytes,18,rep,name=proposal_result_txns,json=proposalResultTxns,proto3" json:"proposal_result_txns,omitempty"`
	ExpenseRatioResultTxns    []*ExpenseRatioResult      `protobuf:"bytes,19,rep,name=expense_ratio_result_txns,json=expenseRatioResultTxns,proto3" json:"expense_ratio_result_txns,omitempty"`
	FoundationTxns            []*FoundationTXN           `protobuf:"bytes,20,rep,name=foundation_txns,json=foundationTxns,proto3" json:"foundation_txns,omitempty"`
	DelegatedVotingTxns       []*DelegatedVotingTXN      `protobuf:"bytes,21,rep,name=delegated_voting_txns,json=delegatedVotingTxns,proto3" json:"delegated_voting_txns,omitempty"`
	QuashTxns                 []*QuashTXN                `protobuf:"bytes,22,rep,name=quash_txns,json=quashTxns,proto3" json:"quash_txns,omitempty"`
	FastQuorumTxns            []*FastQuorumTXN           `protobuf:"bytes,23,rep,name=fast_quorum_txns,json=fastQuorumTxns,proto3" json:"fast_quorum_txns,omitempty"`
	QuashResults              []*QuashResult             `protobuf:"bytes,24,rep,name=quash_results,json=quashResults,proto3" json:"quash_results,omitempty"`
}

func (x *TXNS) Reset() {
	*x = TXNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TXNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TXNS) ProtoMessage() {}

func (x *TXNS) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TXNS.ProtoReflect.Descriptor instead.
func (*TXNS) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{43}
}

func (x *TXNS) GetCoinTxns() []*CoinTXN {
	if x != nil {
		return x.CoinTxns
	}
	return nil
}

func (x *TXNS) GetMintTxns() []*MintTXN {
	if x != nil {
		return x.MintTxns
	}
	return nil
}

func (x *TXNS) GetItemMintTxns() []*ItemizedMintTXN {
	if x != nil {
		return x.ItemMintTxns
	}
	return nil
}

func (x *TXNS) GetContractTxns() []*InstrumentContract {
	if x != nil {
		return x.ContractTxns
	}
	return nil
}

func (x *TXNS) GetGovernanceVotes() []*GovernanceVote {
	if x != nil {
		return x.GovernanceVotes
	}
	return nil
}

func (x *TXNS) GetGovernanceProposals() []*GovernanceProposal {
	if x != nil {
		return x.GovernanceProposals
	}
	return nil
}

func (x *TXNS) GetSmartContracts() []*SmartContractTXN {
	if x != nil {
		return x.SmartContracts
	}
	return nil
}

func (x *TXNS) GetSmartContractExecutes() []*SmartContractExecuteTXN {
	if x != nil {
		return x.SmartContractExecutes
	}
	return nil
}

func (x *TXNS) GetSelfCurEquivs() []*SelfCurrencyEquiv {
	if x != nil {
		return x.SelfCurEquivs
	}
	return nil
}

func (x *TXNS) GetAuthCurEquivs() []*AuthorizedCurrencyEquiv {
	if x != nil {
		return x.AuthCurEquivs
	}
	return nil
}

func (x *TXNS) GetExpenseRatios() []*ExpenseRatioTXN {
	if x != nil {
		return x.ExpenseRatios
	}
	return nil
}

func (x *TXNS) GetTxnFeesAndStatus() []*TXNStatusFees {
	if x != nil {
		return x.TxnFeesAndStatus
	}
	return nil
}

func (x *TXNS) GetTokenFees() []*TokenFees {
	if x != nil {
		return x.TokenFees
	}
	return nil
}

func (x *TXNS) GetNftTxns() []*NFTTXN {
	if x != nil {
		return x.NftTxns
	}
	return nil
}

func (x *TXNS) GetContractUpdateTxns() []*ContractUpdateTXN {
	if x != nil {
		return x.ContractUpdateTxns
	}
	return nil
}

func (x *TXNS) GetValidatorRegistrationTxns() []*ValidatorRegistration {
	if x != nil {
		return x.ValidatorRegistrationTxns
	}
	return nil
}

func (x *TXNS) GetValidatorHeartbeatTxns() []*ValidatorHeartbeat {
	if x != nil {
		return x.ValidatorHeartbeatTxns
	}
	return nil
}

func (x *TXNS) GetProposalResultTxns() []*ProposalResult {
	if x != nil {
		return x.ProposalResultTxns
	}
	return nil
}

func (x *TXNS) GetExpenseRatioResultTxns() []*ExpenseRatioResult {
	if x != nil {
		return x.ExpenseRatioResultTxns
	}
	return nil
}

func (x *TXNS) GetFoundationTxns() []*FoundationTXN {
	if x != nil {
		return x.FoundationTxns
	}
	return nil
}

func (x *TXNS) GetDelegatedVotingTxns() []*DelegatedVotingTXN {
	if x != nil {
		return x.DelegatedVotingTxns
	}
	return nil
}

func (x *TXNS) GetQuashTxns() []*QuashTXN {
	if x != nil {
		return x.QuashTxns
	}
	return nil
}

func (x *TXNS) GetFastQuorumTxns() []*FastQuorumTXN {
	if x != nil {
		return x.FastQuorumTxns
	}
	return nil
}

func (x *TXNS) GetQuashResults() []*QuashResult {
	if x != nil {
		return x.QuashResults
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Amount     string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{44}
}

func (x *Token) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *Token) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type TokenFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Tokens  []*Token `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *TokenFees) Reset() {
	*x = TokenFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFees) ProtoMessage() {}

func (x *TokenFees) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFees.ProtoReflect.Descriptor instead.
func (*TokenFees) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{45}
}

func (x *TokenFees) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TokenFees) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type TXNStatusFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnHash            []byte     `protobuf:"bytes,1,opt,name=txn_hash,json=txnHash,proto3" json:"txn_hash,omitempty"`
	Status             TXN_STATUS `protobuf:"varint,2,opt,name=status,proto3,enum=zera_validator.TXN_STATUS" json:"status,omitempty"`
	BaseFees           []string   `protobuf:"bytes,3,rep,name=base_fees,json=baseFees,proto3" json:"base_fees,omitempty"`
	BaseContractId     []string   `protobuf:"bytes,4,rep,name=base_contract_id,json=baseContractId,proto3" json:"base_contract_id,omitempty"`
	ContractFees       []string   `protobuf:"bytes,5,rep,name=contract_fees,json=contractFees,proto3" json:"contract_fees,omitempty"`
	ContractContractId []string   `protobuf:"bytes,6,rep,name=contract_contract_id,json=contractContractId,proto3" json:"contract_contract_id,omitempty"`
	ApprovedVotes      *string    `protobuf:"bytes,7,opt,name=approved_votes,json=approvedVotes,proto3,oneof" json:"approved_votes,omitempty"`
	AgainstVotes       *string    `protobuf:"bytes,8,opt,name=against_votes,json=againstVotes,proto3,oneof" json:"against_votes,omitempty"`
}

func (x *TXNStatusFees) Reset() {
	*x = TXNStatusFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TXNStatusFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TXNStatusFees) ProtoMessage() {}

func (x *TXNStatusFees) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TXNStatusFees.ProtoReflect.Descriptor instead.
func (*TXNStatusFees) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{46}
}

func (x *TXNStatusFees) GetTxnHash() []byte {
	if x != nil {
		return x.TxnHash
	}
	return nil
}

func (x *TXNStatusFees) GetStatus() TXN_STATUS {
	if x != nil {
		return x.Status
	}
	return TXN_STATUS_OK
}

func (x *TXNStatusFees) GetBaseFees() []string {
	if x != nil {
		return x.BaseFees
	}
	return nil
}

func (x *TXNStatusFees) GetBaseContractId() []string {
	if x != nil {
		return x.BaseContractId
	}
	return nil
}

func (x *TXNStatusFees) GetContractFees() []string {
	if x != nil {
		return x.ContractFees
	}
	return nil
}

func (x *TXNStatusFees) GetContractContractId() []string {
	if x != nil {
		return x.ContractContractId
	}
	return nil
}

func (x *TXNStatusFees) GetApprovedVotes() string {
	if x != nil && x.ApprovedVotes != nil {
		return *x.ApprovedVotes
	}
	return ""
}

func (x *TXNStatusFees) GetAgainstVotes() string {
	if x != nil && x.AgainstVotes != nil {
		return *x.AgainstVotes
	}
	return ""
}

type TXNWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*TXNWrapper_CoinTxn
	//	*TXNWrapper_MintTxn
	//	*TXNWrapper_ItemMintTxn
	//	*TXNWrapper_ContractTxn
	//	*TXNWrapper_GovernanceVote
	//	*TXNWrapper_GovernanceProposal
	//	*TXNWrapper_SmartContract
	//	*TXNWrapper_SmartContractExecute
	//	*TXNWrapper_SelfCurEquivs
	//	*TXNWrapper_AuthCurEquivs
	//	*TXNWrapper_ExpenseRatios
	//	*TXNWrapper_NftTxn
	//	*TXNWrapper_ContractUpdateTxn
	//	*TXNWrapper_ValidatorRegistrationTxn
	//	*TXNWrapper_ValidatorHeartbeatTxn
	//	*TXNWrapper_FoundationTxn
	//	*TXNWrapper_DelegatedVotingTxn
	//	*TXNWrapper_QuashTxn
	//	*TXNWrapper_FastQuorumTxn
	Payload isTXNWrapper_Payload `protobuf_oneof:"payload"`
}

func (x *TXNWrapper) Reset() {
	*x = TXNWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TXNWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TXNWrapper) ProtoMessage() {}

func (x *TXNWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TXNWrapper.ProtoReflect.Descriptor instead.
func (*TXNWrapper) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{47}
}

func (m *TXNWrapper) GetPayload() isTXNWrapper_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TXNWrapper) GetCoinTxn() *CoinTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_CoinTxn); ok {
		return x.CoinTxn
	}
	return nil
}

func (x *TXNWrapper) GetMintTxn() *MintTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_MintTxn); ok {
		return x.MintTxn
	}
	return nil
}

func (x *TXNWrapper) GetItemMintTxn() *ItemizedMintTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_ItemMintTxn); ok {
		return x.ItemMintTxn
	}
	return nil
}

func (x *TXNWrapper) GetContractTxn() *InstrumentContract {
	if x, ok := x.GetPayload().(*TXNWrapper_ContractTxn); ok {
		return x.ContractTxn
	}
	return nil
}

func (x *TXNWrapper) GetGovernanceVote() *GovernanceVote {
	if x, ok := x.GetPayload().(*TXNWrapper_GovernanceVote); ok {
		return x.GovernanceVote
	}
	return nil
}

func (x *TXNWrapper) GetGovernanceProposal() *GovernanceProposal {
	if x, ok := x.GetPayload().(*TXNWrapper_GovernanceProposal); ok {
		return x.GovernanceProposal
	}
	return nil
}

func (x *TXNWrapper) GetSmartContract() *SmartContractTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_SmartContract); ok {
		return x.SmartContract
	}
	return nil
}

func (x *TXNWrapper) GetSmartContractExecute() *SmartContractExecuteTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_SmartContractExecute); ok {
		return x.SmartContractExecute
	}
	return nil
}

func (x *TXNWrapper) GetSelfCurEquivs() *SelfCurrencyEquiv {
	if x, ok := x.GetPayload().(*TXNWrapper_SelfCurEquivs); ok {
		return x.SelfCurEquivs
	}
	return nil
}

func (x *TXNWrapper) GetAuthCurEquivs() *AuthorizedCurrencyEquiv {
	if x, ok := x.GetPayload().(*TXNWrapper_AuthCurEquivs); ok {
		return x.AuthCurEquivs
	}
	return nil
}

func (x *TXNWrapper) GetExpenseRatios() *ExpenseRatioTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_ExpenseRatios); ok {
		return x.ExpenseRatios
	}
	return nil
}

func (x *TXNWrapper) GetNftTxn() *NFTTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_NftTxn); ok {
		return x.NftTxn
	}
	return nil
}

func (x *TXNWrapper) GetContractUpdateTxn() *ContractUpdateTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_ContractUpdateTxn); ok {
		return x.ContractUpdateTxn
	}
	return nil
}

func (x *TXNWrapper) GetValidatorRegistrationTxn() *ValidatorRegistration {
	if x, ok := x.GetPayload().(*TXNWrapper_ValidatorRegistrationTxn); ok {
		return x.ValidatorRegistrationTxn
	}
	return nil
}

func (x *TXNWrapper) GetValidatorHeartbeatTxn() *ValidatorHeartbeat {
	if x, ok := x.GetPayload().(*TXNWrapper_ValidatorHeartbeatTxn); ok {
		return x.ValidatorHeartbeatTxn
	}
	return nil
}

func (x *TXNWrapper) GetFoundationTxn() *FoundationTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_FoundationTxn); ok {
		return x.FoundationTxn
	}
	return nil
}

func (x *TXNWrapper) GetDelegatedVotingTxn() *DelegatedVotingTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_DelegatedVotingTxn); ok {
		return x.DelegatedVotingTxn
	}
	return nil
}

func (x *TXNWrapper) GetQuashTxn() *QuashTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_QuashTxn); ok {
		return x.QuashTxn
	}
	return nil
}

func (x *TXNWrapper) GetFastQuorumTxn() *FastQuorumTXN {
	if x, ok := x.GetPayload().(*TXNWrapper_FastQuorumTxn); ok {
		return x.FastQuorumTxn
	}
	return nil
}

type isTXNWrapper_Payload interface {
	isTXNWrapper_Payload()
}

type TXNWrapper_CoinTxn struct {
	CoinTxn *CoinTXN `protobuf:"bytes,1,opt,name=coin_txn,json=coinTxn,proto3,oneof"`
}

type TXNWrapper_MintTxn struct {
	MintTxn *MintTXN `protobuf:"bytes,2,opt,name=mint_txn,json=mintTxn,proto3,oneof"`
}

type TXNWrapper_ItemMintTxn struct {
	ItemMintTxn *ItemizedMintTXN `protobuf:"bytes,3,opt,name=item_mint_txn,json=itemMintTxn,proto3,oneof"`
}

type TXNWrapper_ContractTxn struct {
	ContractTxn *InstrumentContract `protobuf:"bytes,4,opt,name=contract_txn,json=contractTxn,proto3,oneof"`
}

type TXNWrapper_GovernanceVote struct {
	GovernanceVote *GovernanceVote `protobuf:"bytes,5,opt,name=governance_vote,json=governanceVote,proto3,oneof"`
}

type TXNWrapper_GovernanceProposal struct {
	GovernanceProposal *GovernanceProposal `protobuf:"bytes,6,opt,name=governance_proposal,json=governanceProposal,proto3,oneof"`
}

type TXNWrapper_SmartContract struct {
	SmartContract *SmartContractTXN `protobuf:"bytes,7,opt,name=smart_contract,json=smartContract,proto3,oneof"`
}

type TXNWrapper_SmartContractExecute struct {
	SmartContractExecute *SmartContractExecuteTXN `protobuf:"bytes,8,opt,name=smart_contract_execute,json=smartContractExecute,proto3,oneof"`
}

type TXNWrapper_SelfCurEquivs struct {
	SelfCurEquivs *SelfCurrencyEquiv `protobuf:"bytes,9,opt,name=self_cur_equivs,json=selfCurEquivs,proto3,oneof"`
}

type TXNWrapper_AuthCurEquivs struct {
	AuthCurEquivs *AuthorizedCurrencyEquiv `protobuf:"bytes,10,opt,name=auth_cur_equivs,json=authCurEquivs,proto3,oneof"`
}

type TXNWrapper_ExpenseRatios struct {
	ExpenseRatios *ExpenseRatioTXN `protobuf:"bytes,11,opt,name=expense_ratios,json=expenseRatios,proto3,oneof"`
}

type TXNWrapper_NftTxn struct {
	NftTxn *NFTTXN `protobuf:"bytes,12,opt,name=nft_txn,json=nftTxn,proto3,oneof"`
}

type TXNWrapper_ContractUpdateTxn struct {
	ContractUpdateTxn *ContractUpdateTXN `protobuf:"bytes,13,opt,name=contract_update_txn,json=contractUpdateTxn,proto3,oneof"`
}

type TXNWrapper_ValidatorRegistrationTxn struct {
	ValidatorRegistrationTxn *ValidatorRegistration `protobuf:"bytes,14,opt,name=validator_registration_txn,json=validatorRegistrationTxn,proto3,oneof"`
}

type TXNWrapper_ValidatorHeartbeatTxn struct {
	ValidatorHeartbeatTxn *ValidatorHeartbeat `protobuf:"bytes,15,opt,name=validator_heartbeat_txn,json=validatorHeartbeatTxn,proto3,oneof"`
}

type TXNWrapper_FoundationTxn struct {
	FoundationTxn *FoundationTXN `protobuf:"bytes,20,opt,name=foundation_txn,json=foundationTxn,proto3,oneof"`
}

type TXNWrapper_DelegatedVotingTxn struct {
	DelegatedVotingTxn *DelegatedVotingTXN `protobuf:"bytes,21,opt,name=delegated_voting_txn,json=delegatedVotingTxn,proto3,oneof"`
}

type TXNWrapper_QuashTxn struct {
	QuashTxn *QuashTXN `protobuf:"bytes,22,opt,name=quash_txn,json=quashTxn,proto3,oneof"`
}

type TXNWrapper_FastQuorumTxn struct {
	FastQuorumTxn *FastQuorumTXN `protobuf:"bytes,23,opt,name=fast_quorum_txn,json=fastQuorumTxn,proto3,oneof"`
}

func (*TXNWrapper_CoinTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_MintTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_ItemMintTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_ContractTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_GovernanceVote) isTXNWrapper_Payload() {}

func (*TXNWrapper_GovernanceProposal) isTXNWrapper_Payload() {}

func (*TXNWrapper_SmartContract) isTXNWrapper_Payload() {}

func (*TXNWrapper_SmartContractExecute) isTXNWrapper_Payload() {}

func (*TXNWrapper_SelfCurEquivs) isTXNWrapper_Payload() {}

func (*TXNWrapper_AuthCurEquivs) isTXNWrapper_Payload() {}

func (*TXNWrapper_ExpenseRatios) isTXNWrapper_Payload() {}

func (*TXNWrapper_NftTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_ContractUpdateTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_ValidatorRegistrationTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_ValidatorHeartbeatTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_FoundationTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_DelegatedVotingTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_QuashTxn) isTXNWrapper_Payload() {}

func (*TXNWrapper_FastQuorumTxn) isTXNWrapper_Payload() {}

var File_validator_proto protoreflect.FileDescriptor

var file_validator_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x09, 0x74, 0x78, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xc9, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x58, 0x4e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x73, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x12, 0x61, 0x64, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x0c,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x36,
	0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x0e, 0x42, 0x79, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x78, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x74, 0x78,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0xea, 0x01, 0x0a, 0x0d, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x58, 0x4e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x79,
	0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b,
	0x66, 0x65, 0x65, 0x5f, 0x49, 0x53, 0x4f, 0x34, 0x32, 0x31, 0x37, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x49, 0x53, 0x4f, 0x34, 0x32, 0x31, 0x37, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x49, 0x53, 0x4f, 0x34, 0x32,
	0x31, 0x37, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x42, 0x54,
	0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x62, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x62, 0x74,
	0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0d, 0x46, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x54, 0x58, 0x4e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49,
	0x64, 0x22, 0x90, 0x05, 0x0a, 0x0a, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0b,
	0x66, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e,
	0x44, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x02, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x48, 0x03,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x66, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x57, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x02,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x72, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x75, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc2, 0x01,
	0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75,
	0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x75, 0x72, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xb6, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x71, 0x75, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x22, 0x7d, 0x0a, 0x0f, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x54, 0x58, 0x4e, 0x12, 0x2b,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a,
	0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0d, 0x50, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe8, 0x02,
	0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0xf4, 0x02, 0x0a, 0x07, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x58, 0x4e, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x65, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x22,
	0x7c, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x52, 0x08, 0x63, 0x75, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x22, 0x82, 0x01,
	0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x52, 0x08, 0x63, 0x75, 0x72, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x22, 0xa9, 0x01,
	0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3b, 0x0a, 0x07, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x73, 0x68, 0x54,
	0x58, 0x4e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x74, 0x78, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x47, 0x0a, 0x0b, 0x51,
	0x75, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x78,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x73, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x71, 0x75, 0x61, 0x73, 0x68,
	0x4b, 0x65, 0x79, 0x73, 0x22, 0x6e, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x58, 0x4e, 0x12,
	0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x58, 0x4e,
	0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x06, 0x4e, 0x46, 0x54, 0x54, 0x58, 0x4e, 0x12, 0x2b,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a,
	0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0xd8, 0x03, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x69, 0x6e,
	0x74, 0x54, 0x58, 0x4e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1b, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x01, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xae, 0x04, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x58,
	0x4e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65,
	0x73, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x22, 0xf7, 0x07, 0x0a,
	0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2c,
	0x0a, 0x0f, 0x71, 0x75, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x73, 0x68,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x71, 0x75, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x0e, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf8, 0x02, 0x0a, 0x12, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xdd, 0x01,
	0x0a, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x58, 0x4e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a,
	0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x4b, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52,
	0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xba, 0x01,
	0x0a, 0x17, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x58, 0x4e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x09, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x16, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0x43, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x87, 0x05, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x58, 0x4e, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x43, 0x75,
	0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x72,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x48, 0x02, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x48, 0x03, 0x52, 0x0c, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x9e, 0x0e, 0x0a, 0x04, 0x54, 0x58, 0x4e, 0x53, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x58, 0x4e, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x58, 0x4e, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74,
	0x54, 0x78, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a,
	0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x58, 0x4e, 0x52, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x78, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x0f,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x14, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x13, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x58,
	0x4e, 0x52, 0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x5f, 0x0a, 0x17, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x58, 0x4e, 0x52, 0x15, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x52, 0x0d,
	0x73, 0x65, 0x6c, 0x66, 0x43, 0x75, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x73, 0x12, 0x4f, 0x0a,
	0x0f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x43, 0x75, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x73, 0x12, 0x46,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x54, 0x58, 0x4e, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x74, 0x78, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x58, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x65,
	0x65, 0x73, 0x52, 0x10, 0x74, 0x78, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x65, 0x65, 0x73, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x08, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x58, 0x4e, 0x52, 0x07, 0x6e, 0x66, 0x74, 0x54, 0x78, 0x6e,
	0x73, 0x12, 0x53, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x58, 0x4e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x5c, 0x0a,
	0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x78, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x72, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x5d, 0x0a,
	0x19, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0f,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x58, 0x4e, 0x52, 0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x78, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x58, 0x4e, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x71, 0x75, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x51, 0x75, 0x61, 0x73, 0x68, 0x54, 0x58, 0x4e, 0x52, 0x09, 0x71, 0x75, 0x61, 0x73,
	0x68, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x46, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x58, 0x4e, 0x52, 0x0e,
	0x66, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x40,
	0x0a, 0x0d, 0x71, 0x75, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x40, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x54, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x72, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x0d, 0x54, 0x58, 0x4e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x65, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x78,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x58, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x67,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0xba, 0x0b, 0x0a, 0x0a, 0x54, 0x58, 0x4e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x6f, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x78, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x54,
	0x58, 0x4e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x6e, 0x12, 0x45, 0x0a,
	0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x74, 0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x4d, 0x69, 0x6e,
	0x74, 0x54, 0x78, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x74, 0x78, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x72,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x78, 0x6e, 0x12, 0x49, 0x0a,
	0x0f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x49, 0x0a, 0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x16, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x72,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x43,
	0x75, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x43, 0x75, 0x72, 0x45, 0x71, 0x75, 0x69, 0x76, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x78, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x58, 0x4e, 0x48, 0x00,
	0x52, 0x06, 0x6e, 0x66, 0x74, 0x54, 0x78, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x78, 0x6e, 0x12, 0x65, 0x0a,
	0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x78, 0x6e, 0x12, 0x5c, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x78, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x15, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54,
	0x78, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x78, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x6e, 0x12, 0x56, 0x0a, 0x14, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x78, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x12,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x78, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x78, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x73, 0x68, 0x54, 0x58, 0x4e, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x73, 0x68, 0x54, 0x78, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x54, 0x58, 0x4e, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x54, 0x78, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a,
	0xe1, 0x05, 0x0a, 0x0a, 0x54, 0x58, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x45,
	0x45, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x07,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x46, 0x45, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x32, 0x35, 0x36, 0x10, 0x0c, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4e, 0x46, 0x54, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x46, 0x54, 0x5f,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x48,
	0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x58, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x14, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x54, 0x58, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x18, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x58, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x1b, 0x2a, 0xc2, 0x03, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x58, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4d, 0x41, 0x52,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x09,
	0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x56, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x46, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x10, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x4f, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x11, 0x2a, 0x3f, 0x0a, 0x08, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x50, 0x4c, 0x55, 0x53, 0x50, 0x4c, 0x55,
	0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x41, 0x56,
	0x41, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x03, 0x2a, 0x27, 0x0a, 0x0f, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x41, 0x59, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53,
	0x10, 0x01, 0x2a, 0x52, 0x0a, 0x0d, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x2a, 0x42, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x49, 0x58, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x55, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x0f, 0x47, 0x4f,
	0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x41, 0x47, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x47, 0x47, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x2a, 0x2c, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x46, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x42, 0x54, 0x10, 0x02, 0x32,
	0x83, 0x0a, 0x0a, 0x0a, 0x54, 0x58, 0x4e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x58, 0x4e, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x74, 0x12,
	0x17, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x58, 0x4e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x43, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x7a,
	0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x58, 0x4e, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a,
	0x0e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x22, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x7a, 0x65, 0x72, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x49, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x58, 0x4e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x14,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x58, 0x4e, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x12, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x54, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x12, 0x27, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x71, 0x75, 0x69, 0x76, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1f, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x54, 0x58, 0x4e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x35, 0x0a, 0x03, 0x4e, 0x46, 0x54, 0x12, 0x16, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x58, 0x4e, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x58, 0x4e, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x58,
	0x4e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x7a,
	0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x58, 0x4e,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x51, 0x75, 0x61, 0x73,
	0x68, 0x12, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x73, 0x68, 0x54, 0x58, 0x4e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x46, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x12, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x58, 0x4e,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x12, 0x19, 0x2e, 0x7a, 0x65, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x42, 0x54, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x13, 0x48, 0x01, 0x5a, 0x0f, 0x2e, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_validator_proto_rawDescOnce sync.Once
	file_validator_proto_rawDescData = file_validator_proto_rawDesc
)

func file_validator_proto_rawDescGZIP() []byte {
	file_validator_proto_rawDescOnce.Do(func() {
		file_validator_proto_rawDescData = protoimpl.X.CompressGZIP(file_validator_proto_rawDescData)
	})
	return file_validator_proto_rawDescData
}

var file_validator_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_validator_proto_goTypes = []interface{}{
	(TXN_STATUS)(0),                 // 0: zera_validator.TXN_STATUS
	(TRANSACTION_TYPE)(0),           // 1: zera_validator.TRANSACTION_TYPE
	(LANGUAGE)(0),                   // 2: zera_validator.LANGUAGE
	(PROPOSAL_PERIOD)(0),            // 3: zera_validator.PROPOSAL_PERIOD
	(VARIABLE_TYPE)(0),              // 4: zera_validator.VARIABLE_TYPE
	(CONTRACT_FEE_TYPE)(0),          // 5: zera_validator.CONTRACT_FEE_TYPE
	(GOVERNANCE_TYPE)(0),            // 6: zera_validator.GOVERNANCE_TYPE
	(CONTRACT_TYPE)(0),              // 7: zera_validator.CONTRACT_TYPE
	(*AddRemoveDelegate)(nil),       // 8: zera_validator.AddRemoveDelegate
	(*DelegatedVotingTXN)(nil),      // 9: zera_validator.DelegatedVotingTXN
	(*DelegateVote)(nil),            // 10: zera_validator.DelegateVote
	(*DelegateFees)(nil),            // 11: zera_validator.DelegateFees
	(*ExpenseRatio)(nil),            // 12: zera_validator.ExpenseRatio
	(*KeyValuePair)(nil),            // 13: zera_validator.KeyValuePair
	(*ByteMultiplier)(nil),          // 14: zera_validator.ByteMultiplier
	(*FoundationTXN)(nil),           // 15: zera_validator.FoundationTXN
	(*RevokeSBT)(nil),               // 16: zera_validator.RevokeSBT
	(*FastQuorumTXN)(nil),           // 17: zera_validator.FastQuorumTXN
	(*Governance)(nil),              // 18: zera_validator.Governance
	(*CoinDenomination)(nil),        // 19: zera_validator.CoinDenomination
	(*ContractFees)(nil),            // 20: zera_validator.ContractFees
	(*ItemContractFees)(nil),        // 21: zera_validator.ItemContractFees
	(*RestrictedKey)(nil),           // 22: zera_validator.RestrictedKey
	(*ExpenseRatioTXN)(nil),         // 23: zera_validator.ExpenseRatioTXN
	(*PreMintWallet)(nil),           // 24: zera_validator.PreMintWallet
	(*Transfer)(nil),                // 25: zera_validator.Transfer
	(*BaseTXN)(nil),                 // 26: zera_validator.BaseTXN
	(*SelfCurrencyEquiv)(nil),       // 27: zera_validator.SelfCurrencyEquiv
	(*AuthorizedCurrencyEquiv)(nil), // 28: zera_validator.AuthorizedCurrencyEquiv
	(*CurrencyEquiv)(nil),           // 29: zera_validator.CurrencyEquiv
	(*ExpenseRatioResult)(nil),      // 30: zera_validator.ExpenseRatioResult
	(*Wallets)(nil),                 // 31: zera_validator.Wallets
	(*QuashTXN)(nil),                // 32: zera_validator.QuashTXN
	(*QuashResult)(nil),             // 33: zera_validator.QuashResult
	(*CoinTXN)(nil),                 // 34: zera_validator.CoinTXN
	(*MintTXN)(nil),                 // 35: zera_validator.MintTXN
	(*NFTTXN)(nil),                  // 36: zera_validator.NFTTXN
	(*ItemizedMintTXN)(nil),         // 37: zera_validator.ItemizedMintTXN
	(*ContractUpdateTXN)(nil),       // 38: zera_validator.ContractUpdateTXN
	(*InstrumentContract)(nil),      // 39: zera_validator.InstrumentContract
	(*GovernanceVote)(nil),          // 40: zera_validator.GovernanceVote
	(*GovernanceProposal)(nil),      // 41: zera_validator.GovernanceProposal
	(*SmartContractTXN)(nil),        // 42: zera_validator.SmartContractTXN
	(*SmartContractExecuteTXN)(nil), // 43: zera_validator.SmartContractExecuteTXN
	(*Validator)(nil),               // 44: zera_validator.Validator
	(*ValidatorRegistration)(nil),   // 45: zera_validator.ValidatorRegistration
	(*ValidatorHeartbeat)(nil),      // 46: zera_validator.ValidatorHeartbeat
	(*SmartContractParameter)(nil),  // 47: zera_validator.SmartContractParameter
	(*Votes)(nil),                   // 48: zera_validator.Votes
	(*VotePair)(nil),                // 49: zera_validator.VotePair
	(*ProposalResult)(nil),          // 50: zera_validator.ProposalResult
	(*TXNS)(nil),                    // 51: zera_validator.TXNS
	(*Token)(nil),                   // 52: zera_validator.Token
	(*TokenFees)(nil),               // 53: zera_validator.TokenFees
	(*TXNStatusFees)(nil),           // 54: zera_validator.TXNStatusFees
	(*TXNWrapper)(nil),              // 55: zera_validator.TXNWrapper
	(*timestamppb.Timestamp)(nil),   // 56: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 57: google.protobuf.Empty
}
var file_validator_proto_depIdxs = []int32{
	26,  // 0: zera_validator.DelegatedVotingTXN.base:type_name -> zera_validator.BaseTXN
	10,  // 1: zera_validator.DelegatedVotingTXN.delegate_votes:type_name -> zera_validator.DelegateVote
	11,  // 2: zera_validator.DelegatedVotingTXN.delegate_fees:type_name -> zera_validator.DelegateFees
	8,   // 3: zera_validator.DelegateVote.add_remove_contracts:type_name -> zera_validator.AddRemoveDelegate
	1,   // 4: zera_validator.ByteMultiplier.txn_type:type_name -> zera_validator.TRANSACTION_TYPE
	26,  // 5: zera_validator.FoundationTXN.base:type_name -> zera_validator.BaseTXN
	14,  // 6: zera_validator.FoundationTXN.byte_multiplier:type_name -> zera_validator.ByteMultiplier
	26,  // 7: zera_validator.RevokeSBT.base:type_name -> zera_validator.BaseTXN
	26,  // 8: zera_validator.FastQuorumTXN.base:type_name -> zera_validator.BaseTXN
	6,   // 9: zera_validator.Governance.type:type_name -> zera_validator.GOVERNANCE_TYPE
	3,   // 10: zera_validator.Governance.proposal_period:type_name -> zera_validator.PROPOSAL_PERIOD
	56,  // 11: zera_validator.Governance.start_timestamp:type_name -> google.protobuf.Timestamp
	5,   // 12: zera_validator.ContractFees.contract_fee_type:type_name -> zera_validator.CONTRACT_FEE_TYPE
	26,  // 13: zera_validator.ExpenseRatioTXN.base:type_name -> zera_validator.BaseTXN
	56,  // 14: zera_validator.BaseTXN.timestamp:type_name -> google.protobuf.Timestamp
	26,  // 15: zera_validator.SelfCurrencyEquiv.base:type_name -> zera_validator.BaseTXN
	29,  // 16: zera_validator.SelfCurrencyEquiv.cur_equiv:type_name -> zera_validator.CurrencyEquiv
	26,  // 17: zera_validator.AuthorizedCurrencyEquiv.base:type_name -> zera_validator.BaseTXN
	29,  // 18: zera_validator.AuthorizedCurrencyEquiv.cur_equiv:type_name -> zera_validator.CurrencyEquiv
	31,  // 19: zera_validator.ExpenseRatioResult.wallets:type_name -> zera_validator.Wallets
	26,  // 20: zera_validator.QuashTXN.base:type_name -> zera_validator.BaseTXN
	26,  // 21: zera_validator.CoinTXN.base:type_name -> zera_validator.BaseTXN
	25,  // 22: zera_validator.CoinTXN.transfers:type_name -> zera_validator.Transfer
	26,  // 23: zera_validator.MintTXN.base:type_name -> zera_validator.BaseTXN
	26,  // 24: zera_validator.NFTTXN.base:type_name -> zera_validator.BaseTXN
	26,  // 25: zera_validator.ItemizedMintTXN.base:type_name -> zera_validator.BaseTXN
	13,  // 26: zera_validator.ItemizedMintTXN.parameters:type_name -> zera_validator.KeyValuePair
	21,  // 27: zera_validator.ItemizedMintTXN.contract_fees:type_name -> zera_validator.ItemContractFees
	26,  // 28: zera_validator.ContractUpdateTXN.base:type_name -> zera_validator.BaseTXN
	18,  // 29: zera_validator.ContractUpdateTXN.governance:type_name -> zera_validator.Governance
	22,  // 30: zera_validator.ContractUpdateTXN.restricted_keys:type_name -> zera_validator.RestrictedKey
	20,  // 31: zera_validator.ContractUpdateTXN.contract_fees:type_name -> zera_validator.ContractFees
	13,  // 32: zera_validator.ContractUpdateTXN.custom_parameters:type_name -> zera_validator.KeyValuePair
	12,  // 33: zera_validator.ContractUpdateTXN.expense_ratio:type_name -> zera_validator.ExpenseRatio
	26,  // 34: zera_validator.InstrumentContract.base:type_name -> zera_validator.BaseTXN
	18,  // 35: zera_validator.InstrumentContract.governance:type_name -> zera_validator.Governance
	22,  // 36: zera_validator.InstrumentContract.restricted_keys:type_name -> zera_validator.RestrictedKey
	20,  // 37: zera_validator.InstrumentContract.contract_fees:type_name -> zera_validator.ContractFees
	24,  // 38: zera_validator.InstrumentContract.premint_wallets:type_name -> zera_validator.PreMintWallet
	19,  // 39: zera_validator.InstrumentContract.coin_denomination:type_name -> zera_validator.CoinDenomination
	13,  // 40: zera_validator.InstrumentContract.custom_parameters:type_name -> zera_validator.KeyValuePair
	12,  // 41: zera_validator.InstrumentContract.expense_ratio:type_name -> zera_validator.ExpenseRatio
	7,   // 42: zera_validator.InstrumentContract.type:type_name -> zera_validator.CONTRACT_TYPE
	26,  // 43: zera_validator.GovernanceVote.base:type_name -> zera_validator.BaseTXN
	26,  // 44: zera_validator.GovernanceProposal.base:type_name -> zera_validator.BaseTXN
	56,  // 45: zera_validator.GovernanceProposal.start_timestamp:type_name -> google.protobuf.Timestamp
	56,  // 46: zera_validator.GovernanceProposal.end_timestamp:type_name -> google.protobuf.Timestamp
	26,  // 47: zera_validator.SmartContractTXN.base:type_name -> zera_validator.BaseTXN
	2,   // 48: zera_validator.SmartContractTXN.language:type_name -> zera_validator.LANGUAGE
	47,  // 49: zera_validator.SmartContractTXN.variable_type:type_name -> zera_validator.SmartContractParameter
	26,  // 50: zera_validator.SmartContractExecuteTXN.base:type_name -> zera_validator.BaseTXN
	47,  // 51: zera_validator.SmartContractExecuteTXN.parameters:type_name -> zera_validator.SmartContractParameter
	56,  // 52: zera_validator.Validator.timestamp:type_name -> google.protobuf.Timestamp
	26,  // 53: zera_validator.ValidatorRegistration.base:type_name -> zera_validator.BaseTXN
	44,  // 54: zera_validator.ValidatorRegistration.validator:type_name -> zera_validator.Validator
	26,  // 55: zera_validator.ValidatorHeartbeat.base:type_name -> zera_validator.BaseTXN
	4,   // 56: zera_validator.SmartContractParameter.type:type_name -> zera_validator.VARIABLE_TYPE
	49,  // 57: zera_validator.Votes.votes:type_name -> zera_validator.VotePair
	26,  // 58: zera_validator.ProposalResult.base:type_name -> zera_validator.BaseTXN
	48,  // 59: zera_validator.ProposalResult.support_votes:type_name -> zera_validator.Votes
	48,  // 60: zera_validator.ProposalResult.against_votes:type_name -> zera_validator.Votes
	48,  // 61: zera_validator.ProposalResult.option_votes:type_name -> zera_validator.Votes
	34,  // 62: zera_validator.TXNS.coin_txns:type_name -> zera_validator.CoinTXN
	35,  // 63: zera_validator.TXNS.mint_txns:type_name -> zera_validator.MintTXN
	37,  // 64: zera_validator.TXNS.item_mint_txns:type_name -> zera_validator.ItemizedMintTXN
	39,  // 65: zera_validator.TXNS.contract_txns:type_name -> zera_validator.InstrumentContract
	40,  // 66: zera_validator.TXNS.governance_votes:type_name -> zera_validator.GovernanceVote
	41,  // 67: zera_validator.TXNS.governance_proposals:type_name -> zera_validator.GovernanceProposal
	42,  // 68: zera_validator.TXNS.smart_contracts:type_name -> zera_validator.SmartContractTXN
	43,  // 69: zera_validator.TXNS.smart_contract_executes:type_name -> zera_validator.SmartContractExecuteTXN
	27,  // 70: zera_validator.TXNS.self_cur_equivs:type_name -> zera_validator.SelfCurrencyEquiv
	28,  // 71: zera_validator.TXNS.auth_cur_equivs:type_name -> zera_validator.AuthorizedCurrencyEquiv
	23,  // 72: zera_validator.TXNS.expense_ratios:type_name -> zera_validator.ExpenseRatioTXN
	54,  // 73: zera_validator.TXNS.txn_fees_and_status:type_name -> zera_validator.TXNStatusFees
	53,  // 74: zera_validator.TXNS.token_fees:type_name -> zera_validator.TokenFees
	36,  // 75: zera_validator.TXNS.nft_txns:type_name -> zera_validator.NFTTXN
	38,  // 76: zera_validator.TXNS.contract_update_txns:type_name -> zera_validator.ContractUpdateTXN
	45,  // 77: zera_validator.TXNS.validator_registration_txns:type_name -> zera_validator.ValidatorRegistration
	46,  // 78: zera_validator.TXNS.validator_heartbeat_txns:type_name -> zera_validator.ValidatorHeartbeat
	50,  // 79: zera_validator.TXNS.proposal_result_txns:type_name -> zera_validator.ProposalResult
	30,  // 80: zera_validator.TXNS.expense_ratio_result_txns:type_name -> zera_validator.ExpenseRatioResult
	15,  // 81: zera_validator.TXNS.foundation_txns:type_name -> zera_validator.FoundationTXN
	9,   // 82: zera_validator.TXNS.delegated_voting_txns:type_name -> zera_validator.DelegatedVotingTXN
	32,  // 83: zera_validator.TXNS.quash_txns:type_name -> zera_validator.QuashTXN
	17,  // 84: zera_validator.TXNS.fast_quorum_txns:type_name -> zera_validator.FastQuorumTXN
	33,  // 85: zera_validator.TXNS.quash_results:type_name -> zera_validator.QuashResult
	52,  // 86: zera_validator.TokenFees.tokens:type_name -> zera_validator.Token
	0,   // 87: zera_validator.TXNStatusFees.status:type_name -> zera_validator.TXN_STATUS
	34,  // 88: zera_validator.TXNWrapper.coin_txn:type_name -> zera_validator.CoinTXN
	35,  // 89: zera_validator.TXNWrapper.mint_txn:type_name -> zera_validator.MintTXN
	37,  // 90: zera_validator.TXNWrapper.item_mint_txn:type_name -> zera_validator.ItemizedMintTXN
	39,  // 91: zera_validator.TXNWrapper.contract_txn:type_name -> zera_validator.InstrumentContract
	40,  // 92: zera_validator.TXNWrapper.governance_vote:type_name -> zera_validator.GovernanceVote
	41,  // 93: zera_validator.TXNWrapper.governance_proposal:type_name -> zera_validator.GovernanceProposal
	42,  // 94: zera_validator.TXNWrapper.smart_contract:type_name -> zera_validator.SmartContractTXN
	43,  // 95: zera_validator.TXNWrapper.smart_contract_execute:type_name -> zera_validator.SmartContractExecuteTXN
	27,  // 96: zera_validator.TXNWrapper.self_cur_equivs:type_name -> zera_validator.SelfCurrencyEquiv
	28,  // 97: zera_validator.TXNWrapper.auth_cur_equivs:type_name -> zera_validator.AuthorizedCurrencyEquiv
	23,  // 98: zera_validator.TXNWrapper.expense_ratios:type_name -> zera_validator.ExpenseRatioTXN
	36,  // 99: zera_validator.TXNWrapper.nft_txn:type_name -> zera_validator.NFTTXN
	38,  // 100: zera_validator.TXNWrapper.contract_update_txn:type_name -> zera_validator.ContractUpdateTXN
	45,  // 101: zera_validator.TXNWrapper.validator_registration_txn:type_name -> zera_validator.ValidatorRegistration
	46,  // 102: zera_validator.TXNWrapper.validator_heartbeat_txn:type_name -> zera_validator.ValidatorHeartbeat
	15,  // 103: zera_validator.TXNWrapper.foundation_txn:type_name -> zera_validator.FoundationTXN
	9,   // 104: zera_validator.TXNWrapper.delegated_voting_txn:type_name -> zera_validator.DelegatedVotingTXN
	32,  // 105: zera_validator.TXNWrapper.quash_txn:type_name -> zera_validator.QuashTXN
	17,  // 106: zera_validator.TXNWrapper.fast_quorum_txn:type_name -> zera_validator.FastQuorumTXN
	34,  // 107: zera_validator.TXNService.Coin:input_type -> zera_validator.CoinTXN
	35,  // 108: zera_validator.TXNService.Mint:input_type -> zera_validator.MintTXN
	37,  // 109: zera_validator.TXNService.ItemMint:input_type -> zera_validator.ItemizedMintTXN
	39,  // 110: zera_validator.TXNService.Contract:input_type -> zera_validator.InstrumentContract
	41,  // 111: zera_validator.TXNService.GovernProposal:input_type -> zera_validator.GovernanceProposal
	40,  // 112: zera_validator.TXNService.GovernVote:input_type -> zera_validator.GovernanceVote
	42,  // 113: zera_validator.TXNService.SmartContract:input_type -> zera_validator.SmartContractTXN
	43,  // 114: zera_validator.TXNService.SmartContractExecute:input_type -> zera_validator.SmartContractExecuteTXN
	27,  // 115: zera_validator.TXNService.CurrencyEquiv:input_type -> zera_validator.SelfCurrencyEquiv
	28,  // 116: zera_validator.TXNService.AuthCurrencyEquiv:input_type -> zera_validator.AuthorizedCurrencyEquiv
	23,  // 117: zera_validator.TXNService.ExpenseRatio:input_type -> zera_validator.ExpenseRatioTXN
	36,  // 118: zera_validator.TXNService.NFT:input_type -> zera_validator.NFTTXN
	38,  // 119: zera_validator.TXNService.ContractUpdate:input_type -> zera_validator.ContractUpdateTXN
	15,  // 120: zera_validator.TXNService.Foundation:input_type -> zera_validator.FoundationTXN
	9,   // 121: zera_validator.TXNService.DelegatedVoting:input_type -> zera_validator.DelegatedVotingTXN
	32,  // 122: zera_validator.TXNService.Quash:input_type -> zera_validator.QuashTXN
	17,  // 123: zera_validator.TXNService.FastQuorum:input_type -> zera_validator.FastQuorumTXN
	16,  // 124: zera_validator.TXNService.Revoke:input_type -> zera_validator.RevokeSBT
	57,  // 125: zera_validator.TXNService.Coin:output_type -> google.protobuf.Empty
	57,  // 126: zera_validator.TXNService.Mint:output_type -> google.protobuf.Empty
	57,  // 127: zera_validator.TXNService.ItemMint:output_type -> google.protobuf.Empty
	57,  // 128: zera_validator.TXNService.Contract:output_type -> google.protobuf.Empty
	57,  // 129: zera_validator.TXNService.GovernProposal:output_type -> google.protobuf.Empty
	57,  // 130: zera_validator.TXNService.GovernVote:output_type -> google.protobuf.Empty
	57,  // 131: zera_validator.TXNService.SmartContract:output_type -> google.protobuf.Empty
	57,  // 132: zera_validator.TXNService.SmartContractExecute:output_type -> google.protobuf.Empty
	57,  // 133: zera_validator.TXNService.CurrencyEquiv:output_type -> google.protobuf.Empty
	57,  // 134: zera_validator.TXNService.AuthCurrencyEquiv:output_type -> google.protobuf.Empty
	57,  // 135: zera_validator.TXNService.ExpenseRatio:output_type -> google.protobuf.Empty
	57,  // 136: zera_validator.TXNService.NFT:output_type -> google.protobuf.Empty
	57,  // 137: zera_validator.TXNService.ContractUpdate:output_type -> google.protobuf.Empty
	57,  // 138: zera_validator.TXNService.Foundation:output_type -> google.protobuf.Empty
	57,  // 139: zera_validator.TXNService.DelegatedVoting:output_type -> google.protobuf.Empty
	57,  // 140: zera_validator.TXNService.Quash:output_type -> google.protobuf.Empty
	57,  // 141: zera_validator.TXNService.FastQuorum:output_type -> google.protobuf.Empty
	57,  // 142: zera_validator.TXNService.Revoke:output_type -> google.protobuf.Empty
	125, // [125:143] is the sub-list for method output_type
	107, // [107:125] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_validator_proto_init() }
func file_validator_proto_init() {
	if File_validator_proto != nil {
		return
	}
	file_txn_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_validator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRemoveDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatedVotingTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpenseRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteMultiplier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoundationTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeSBT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastQuorumTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Governance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinDenomination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemContractFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestrictedKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpenseRatioTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreMintWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfCurrencyEquiv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedCurrencyEquiv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyEquiv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpenseRatioResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuashTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuashResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemizedMintTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractUpdateTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartContractTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartContractExecuteTXN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartContractParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Votes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TXNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TXNStatusFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TXNWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_validator_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*TXNWrapper_CoinTxn)(nil),
		(*TXNWrapper_MintTxn)(nil),
		(*TXNWrapper_ItemMintTxn)(nil),
		(*TXNWrapper_ContractTxn)(nil),
		(*TXNWrapper_GovernanceVote)(nil),
		(*TXNWrapper_GovernanceProposal)(nil),
		(*TXNWrapper_SmartContract)(nil),
		(*TXNWrapper_SmartContractExecute)(nil),
		(*TXNWrapper_SelfCurEquivs)(nil),
		(*TXNWrapper_AuthCurEquivs)(nil),
		(*TXNWrapper_ExpenseRatios)(nil),
		(*TXNWrapper_NftTxn)(nil),
		(*TXNWrapper_ContractUpdateTxn)(nil),
		(*TXNWrapper_ValidatorRegistrationTxn)(nil),
		(*TXNWrapper_ValidatorHeartbeatTxn)(nil),
		(*TXNWrapper_FoundationTxn)(nil),
		(*TXNWrapper_DelegatedVotingTxn)(nil),
		(*TXNWrapper_QuashTxn)(nil),
		(*TXNWrapper_FastQuorumTxn)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_validator_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_validator_proto_goTypes,
		DependencyIndexes: file_validator_proto_depIdxs,
		EnumInfos:         file_validator_proto_enumTypes,
		MessageInfos:      file_validator_proto_msgTypes,
	}.Build()
	File_validator_proto = out.File
	file_validator_proto_rawDesc = nil
	file_validator_proto_goTypes = nil
	file_validator_proto_depIdxs = nil
}
